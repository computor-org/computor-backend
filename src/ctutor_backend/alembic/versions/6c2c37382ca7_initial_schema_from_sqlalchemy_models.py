"""initial_schema_from_sqlalchemy_models

Revision ID: 6c2c37382ca7
Revises: 
Create Date: 2025-07-11 17:53:35.920181

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
import sqlalchemy_utils

# revision identifiers, used by Alembic.
revision: str = '6c2c37382ca7'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # Create PostgreSQL extensions
    op.execute("CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";")
    op.execute("CREATE EXTENSION IF NOT EXISTS ltree;")
    op.execute("CREATE EXTENSION IF NOT EXISTS pgcrypto;")
    
    # Create enums (excluding ctutor_color which will be VARCHAR)
    op.execute("""
        CREATE TYPE organization_type AS ENUM ('user', 'community', 'organization');
        CREATE TYPE user_type AS ENUM ('user', 'token');
        CREATE TYPE ctutor_group_type AS ENUM ('fixed', 'dynamic');
    """)
    
    # Create utility functions (with updated slug function that allows underscores)
    op.execute("""
        CREATE OR REPLACE FUNCTION ctutor_valid_slug(value text) 
        RETURNS boolean 
        LANGUAGE plpgsql 
        AS $function$
        BEGIN
            -- Check if the value matches the slug pattern (allow underscores and hyphens)
            RETURN value ~ '^[a-z0-9]+([_-][a-z0-9]+)*$';
        END;
        $function$;
    """)
    
    # Create sequences
    op.execute("CREATE SEQUENCE IF NOT EXISTS user_unique_fs_number_seq;")
    
    # Create tables
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('course_content_kind',
    sa.Column('id', sa.String(length=255), nullable=False),
    sa.Column('title', sa.String(length=255), nullable=True),
    sa.Column('description', sa.String(length=4096), nullable=True),
    sa.Column('has_ascendants', sa.Boolean(), nullable=False),
    sa.Column('has_descendants', sa.Boolean(), nullable=False),
    sa.Column('submittable', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('course_role',
    sa.Column('id', sa.String(length=255), nullable=False),
    sa.Column('title', sa.String(length=255), nullable=True),
    sa.Column('description', sa.String(length=4096), nullable=True),
    sa.Column('builtin', sa.Boolean(), server_default=sa.text('false'), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('group',
    sa.Column('id', postgresql.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('version', sa.BigInteger(), server_default=sa.text('0'), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by', postgresql.UUID(), nullable=True),
    sa.Column('updated_by', postgresql.UUID(), nullable=True),
    sa.Column('properties', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('title', sa.String(length=255), nullable=True),
    sa.Column('description', sa.String(length=4096), nullable=True),
    sa.Column('slug', sa.String(length=255), nullable=False),
    sa.Column('type', postgresql.ENUM(name='ctutor_group_type', create_type=False), server_default=sa.text("'fixed'::ctutor_group_type"), nullable=True),
    sa.CheckConstraint('ctutor_valid_slug((slug)::text)'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('role',
    sa.Column('id', sa.String(length=255), nullable=False),
    sa.Column('title', sa.String(length=255), nullable=True),
    sa.Column('description', sa.String(length=4096), nullable=True),
    sa.Column('builtin', sa.Boolean(), server_default=sa.text('false'), nullable=False),
    sa.CheckConstraint("(NOT builtin) OR ((id)::text ~ '^_'::text)"),
    sa.CheckConstraint('(builtin AND ctutor_valid_slug(SUBSTRING(id FROM 2))) OR ((NOT builtin) AND ctutor_valid_slug((id)::text))'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('user',
    sa.Column('number', sa.String(length=255), nullable=True),
    sa.Column('id', postgresql.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('version', sa.BigInteger(), server_default=sa.text('0'), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by', postgresql.UUID(), nullable=True),
    sa.Column('updated_by', postgresql.UUID(), nullable=True),
    sa.Column('properties', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('archived_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('given_name', sa.String(length=255), nullable=True),
    sa.Column('family_name', sa.String(length=255), nullable=True),
    sa.Column('email', sa.String(length=320), nullable=True),
    sa.Column('user_type', postgresql.ENUM(name='user_type', create_type=False), server_default=sa.text("'user'::user_type"), nullable=False),
    sa.Column('fs_number', sa.BigInteger(), server_default=sa.text("nextval('user_unique_fs_number_seq'::regclass)"), nullable=False),
    sa.Column('token_expiration', sa.DateTime(timezone=True), nullable=True),
    sa.Column('username', sa.String(length=255), nullable=True),
    sa.Column('password', sa.String(length=255), nullable=True),
    sa.Column('auth_token', sa.String(length=4096), nullable=True),
    sa.CheckConstraint("(user_type <> 'token') OR (token_expiration IS NOT NULL)", name='ck_user_token_expiration'),
    sa.ForeignKeyConstraint(['created_by'], ['user.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['updated_by'], ['user.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email'),
    sa.UniqueConstraint('number'),
    sa.UniqueConstraint('username')
    )
    op.create_table('account',
    sa.Column('id', postgresql.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('version', sa.BigInteger(), server_default=sa.text('0'), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by', postgresql.UUID(), nullable=True),
    sa.Column('updated_by', postgresql.UUID(), nullable=True),
    sa.Column('properties', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('provider', sa.String(length=255), nullable=False),
    sa.Column('type', sa.String(length=63), nullable=False),
    sa.Column('provider_account_id', sa.String(length=255), nullable=False),
    sa.Column('user_id', postgresql.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], onupdate='RESTRICT', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('account_provider_type_provider_account_id_key', 'account', ['provider', 'type', 'provider_account_id'], unique=True)
    op.create_index('account_provider_type_user_id_key', 'account', ['provider', 'type', 'user_id'], unique=True)
    op.create_index(op.f('ix_account_user_id'), 'account', ['user_id'], unique=False)
    op.create_table('execution_backend',
    sa.Column('id', postgresql.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('version', sa.BigInteger(), server_default=sa.text('0'), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by', postgresql.UUID(), nullable=True),
    sa.Column('updated_by', postgresql.UUID(), nullable=True),
    sa.Column('properties', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('type', sa.String(length=255), nullable=False),
    sa.Column('slug', sa.String(length=255), nullable=False),
    sa.CheckConstraint("(slug)::text ~* '^[A-Za-z0-9_.-]+$'::text"),
    sa.ForeignKeyConstraint(['created_by'], ['user.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['updated_by'], ['user.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('slug')
    )
    op.create_table('group_claim',
    sa.Column('group_id', postgresql.UUID(), nullable=False),
    sa.Column('claim_type', sa.String(length=255), nullable=False),
    sa.Column('claim_value', sa.String(length=255), nullable=False),
    sa.Column('version', sa.BigInteger(), server_default=sa.text('0'), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by', postgresql.UUID(), nullable=True),
    sa.Column('updated_by', postgresql.UUID(), nullable=True),
    sa.Column('properties', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.ForeignKeyConstraint(['group_id'], ['group.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('group_id', 'claim_type', 'claim_value')
    )
    op.create_table('organization',
    sa.Column('id', postgresql.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('version', sa.BigInteger(), server_default=sa.text('0'), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by', postgresql.UUID(), nullable=True),
    sa.Column('updated_by', postgresql.UUID(), nullable=True),
    sa.Column('properties', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('number', sa.String(length=255), nullable=True),
    sa.Column('title', sa.String(length=255), nullable=True),
    sa.Column('description', sa.String(length=4096), nullable=True),
    sa.Column('archived_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('email', sa.String(length=320), nullable=True),
    sa.Column('telephone', sa.String(length=255), nullable=True),
    sa.Column('fax_number', sa.String(length=255), nullable=True),
    sa.Column('url', sa.String(length=2048), nullable=True),
    sa.Column('postal_code', sa.String(length=255), nullable=True),
    sa.Column('street_address', sa.String(length=1024), nullable=True),
    sa.Column('locality', sa.String(length=255), nullable=True),
    sa.Column('region', sa.String(length=255), nullable=True),
    sa.Column('country', sa.String(length=255), nullable=True),
    sa.Column('organization_type', postgresql.ENUM(name='organization_type', create_type=False), nullable=False),
    sa.Column('user_id', postgresql.UUID(), nullable=True),
    sa.Column('path', sqlalchemy_utils.types.ltree.LtreeType(), nullable=False),
    sa.Column('parent_path', sqlalchemy_utils.types.ltree.LtreeType(), sa.Computed('\n        CASE\n            WHEN (nlevel(path) > 1) THEN subpath(path, 0, (nlevel(path) - 1))\n            ELSE NULL::ltree\n        END\n    ', persisted=True), nullable=True),
    sa.CheckConstraint("((organization_type = 'user'::organization_type) AND (title IS NULL)) OR ((organization_type <> 'user'::organization_type) AND (title IS NOT NULL))"),
    sa.CheckConstraint("((organization_type = 'user'::organization_type) AND (user_id IS NOT NULL)) OR ((organization_type <> 'user'::organization_type) AND (user_id IS NULL))"),
    sa.ForeignKeyConstraint(['created_by'], ['user.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['updated_by'], ['user.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], onupdate='RESTRICT', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id')
    )
    op.create_index(op.f('ix_organization_organization_type'), 'organization', ['organization_type'], unique=False)
    op.create_index(op.f('ix_organization_path'), 'organization', ['path'], unique=False)
    op.create_index('organization_number_key', 'organization', ['organization_type', 'number'], unique=True)
    op.create_index('organization_path_key', 'organization', ['organization_type', 'path'], unique=True)
    op.create_table('example_repository',
    sa.Column('id', postgresql.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False, comment='Human-readable name of the repository'),
    sa.Column('description', sa.Text(), nullable=True, comment='Description of the repository and its contents'),
    sa.Column('source_url', sa.Text(), nullable=False, comment='Git repository URL'),
    sa.Column('access_token', sa.Text(), nullable=True, comment='Encrypted token for accessing private repositories'),
    sa.Column('default_branch', sa.String(length=100), nullable=False, server_default='main', comment='Default branch to sync from'),
    sa.Column('visibility', sa.String(length=20), nullable=False, server_default='private', comment='Repository visibility: public, private, or restricted'),
    sa.Column('organization_id', postgresql.UUID(), nullable=True, comment='Organization that owns this repository'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by', postgresql.UUID(), nullable=True, comment='User who created this repository'),
    sa.Column('updated_by', postgresql.UUID(), nullable=True, comment='User who last updated this repository'),
    sa.CheckConstraint("visibility IN ('public', 'private', 'restricted')", name='check_visibility'),
    sa.ForeignKeyConstraint(['created_by'], ['user.id'], ),
    sa.ForeignKeyConstraint(['organization_id'], ['organization.id'], ),
    sa.ForeignKeyConstraint(['updated_by'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('source_url')
    )
    op.create_table('example',
    sa.Column('id', postgresql.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('example_repository_id', postgresql.UUID(), nullable=False, comment='Reference to the repository containing this example'),
    sa.Column('directory', sa.String(length=255), nullable=False, comment="Name of the directory containing this example (e.g., 'hello-world')"),
    sa.Column('title', sa.String(length=255), nullable=False, comment='Human-readable title of the example'),
    sa.Column('description', sa.Text(), nullable=True, comment='Detailed description of the example'),
    sa.Column('subject', sa.String(length=50), nullable=True, comment="Primary programming language (e.g., 'python', 'java')"),
    sa.Column('category', sa.String(length=100), nullable=True, comment='Category for grouping examples'),
    sa.Column('tags', postgresql.ARRAY(sa.String()), nullable=False, server_default='{}', comment='Tags for searching and filtering'),
    sa.Column('version_identifier', sa.String(length=64), nullable=True, comment='Version Identifier (e.g. hash) of example directory contents for change detection'),
    sa.Column('is_active', sa.Boolean(), nullable=False, server_default='true', comment='Whether the example is active'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by', postgresql.UUID(), nullable=True, comment='User who created this example record'),
    sa.Column('updated_by', postgresql.UUID(), nullable=True, comment='User who last updated this example record'),
    sa.CheckConstraint("directory ~ '^[a-zA-Z0-9_-]+$'", name='check_directory_format'),
    sa.ForeignKeyConstraint(['created_by'], ['user.id'], ),
    sa.ForeignKeyConstraint(['example_repository_id'], ['example_repository.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['updated_by'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('example_repository_id', 'directory', name='unique_example_per_directory')
    )
    op.create_table('profile',
    sa.Column('id', postgresql.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('version', sa.BigInteger(), server_default=sa.text('0'), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by', postgresql.UUID(), nullable=True),
    sa.Column('updated_by', postgresql.UUID(), nullable=True),
    sa.Column('properties', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('avatar_color', sa.Integer(), nullable=True),
    sa.Column('avatar_image', sa.String(length=2048), nullable=True),
    sa.Column('nickname', sa.String(length=255), nullable=True),
    sa.Column('bio', sa.String(length=16384), nullable=True),
    sa.Column('url', sa.String(length=2048), nullable=True),
    sa.Column('user_id', postgresql.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], onupdate='RESTRICT', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('nickname'),
    sa.UniqueConstraint('user_id')
    )
    op.create_table('role_claim',
    sa.Column('role_id', sa.String(length=255), nullable=False),
    sa.Column('claim_type', sa.String(length=255), nullable=False),
    sa.Column('claim_value', sa.String(length=255), nullable=False),
    sa.Column('version', sa.BigInteger(), server_default=sa.text('0'), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by', postgresql.UUID(), nullable=True),
    sa.Column('updated_by', postgresql.UUID(), nullable=True),
    sa.Column('properties', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.ForeignKeyConstraint(['role_id'], ['role.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('role_id', 'claim_type', 'claim_value')
    )
    op.create_table('session',
    sa.Column('id', postgresql.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('version', sa.BigInteger(), server_default=sa.text('0'), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by', postgresql.UUID(), nullable=True),
    sa.Column('updated_by', postgresql.UUID(), nullable=True),
    sa.Column('properties', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('user_id', postgresql.UUID(), nullable=False),
    sa.Column('session_id', sa.String(length=1024), nullable=False),
    sa.Column('logout_time', sa.DateTime(timezone=True), nullable=True),
    sa.Column('ip_address', postgresql.INET(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], onupdate='RESTRICT', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('student_profile',
    sa.Column('id', postgresql.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('version', sa.BigInteger(), server_default=sa.text('0'), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by', postgresql.UUID(), nullable=True),
    sa.Column('updated_by', postgresql.UUID(), nullable=True),
    sa.Column('properties', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('student_id', sa.String(length=255), nullable=True),
    sa.Column('student_email', sa.String(length=320), nullable=True),
    sa.Column('user_id', postgresql.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], onupdate='RESTRICT', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('student_email'),
    sa.UniqueConstraint('student_id'),
    sa.UniqueConstraint('user_id')
    )
    op.create_table('user_group',
    sa.Column('user_id', postgresql.UUID(), nullable=False),
    sa.Column('group_id', postgresql.UUID(), nullable=False),
    sa.Column('transient', sa.Boolean(), server_default=sa.text('false'), nullable=True),
    sa.Column('version', sa.BigInteger(), server_default=sa.text('0'), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by', postgresql.UUID(), nullable=True),
    sa.Column('updated_by', postgresql.UUID(), nullable=True),
    sa.ForeignKeyConstraint(['group_id'], ['group.id'], onupdate='CASCADE', ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('user_id', 'group_id')
    )
    op.create_table('user_role',
    sa.Column('user_id', postgresql.UUID(), nullable=False),
    sa.Column('role_id', sa.String(length=255), nullable=False),
    sa.Column('transient', sa.Boolean(), server_default=sa.text('false'), nullable=True),
    sa.Column('version', sa.BigInteger(), server_default=sa.text('0'), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by', postgresql.UUID(), nullable=True),
    sa.Column('updated_by', postgresql.UUID(), nullable=True),
    sa.ForeignKeyConstraint(['role_id'], ['role.id'], onupdate='CASCADE', ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('user_id', 'role_id')
    )
    op.create_table('course_family',
    sa.Column('id', postgresql.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('version', sa.BigInteger(), server_default=sa.text('0'), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by', postgresql.UUID(), nullable=True),
    sa.Column('updated_by', postgresql.UUID(), nullable=True),
    sa.Column('properties', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('title', sa.String(length=255), nullable=True),
    sa.Column('description', sa.String(length=4096), nullable=True),
    sa.Column('path', sqlalchemy_utils.types.ltree.LtreeType(), nullable=False),
    sa.Column('organization_id', postgresql.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['created_by'], ['user.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['organization_id'], ['organization.id'], onupdate='RESTRICT', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['updated_by'], ['user.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('course_family_path_key', 'course_family', ['organization_id', 'path'], unique=True)
    op.create_table('course',
    sa.Column('id', postgresql.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('version', sa.BigInteger(), server_default=sa.text('0'), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by', postgresql.UUID(), nullable=True),
    sa.Column('updated_by', postgresql.UUID(), nullable=True),
    sa.Column('properties', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('title', sa.String(length=255), nullable=True),
    sa.Column('description', sa.String(length=4096), nullable=True),
    sa.Column('path', sqlalchemy_utils.types.ltree.LtreeType(), nullable=False),
    sa.Column('course_family_id', postgresql.UUID(), nullable=False),
    sa.Column('organization_id', postgresql.UUID(), nullable=False),
    sa.Column('version_identifier', sa.String(length=2048), nullable=True),
    sa.ForeignKeyConstraint(['course_family_id'], ['course_family.id'], onupdate='RESTRICT', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['created_by'], ['user.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['organization_id'], ['organization.id'], onupdate='RESTRICT', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['updated_by'], ['user.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('course_path_key', 'course', ['course_family_id', 'path'], unique=True)
    op.create_table('course_content_type',
    sa.Column('id', postgresql.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('version', sa.BigInteger(), server_default=sa.text('0'), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by', postgresql.UUID(), nullable=True),
    sa.Column('updated_by', postgresql.UUID(), nullable=True),
    sa.Column('properties', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('title', sa.String(length=255), nullable=True),
    sa.Column('description', sa.String(length=4096), nullable=True),
    sa.Column('slug', sa.String(length=255), nullable=False),
    sa.Column('color', sa.String(length=255), nullable=True),
    sa.Column('course_content_kind_id', sa.String(length=255), nullable=False),
    sa.Column('course_id', postgresql.UUID(), nullable=False),
    sa.CheckConstraint("(slug)::text ~* '^[A-Za-z0-9_.-]+$'::text"),
    sa.ForeignKeyConstraint(['course_content_kind_id'], ['course_content_kind.id'], onupdate='RESTRICT', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['course_id'], ['course.id'], onupdate='RESTRICT', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['created_by'], ['user.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['updated_by'], ['user.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('course_content_type_course_id_key', 'course_content_type', ['id', 'course_id'], unique=True)
    op.create_index('course_content_type_slug_key', 'course_content_type', ['slug', 'course_id', 'course_content_kind_id'], unique=True)
    op.create_table('course_execution_backend',
    sa.Column('execution_backend_id', postgresql.UUID(), nullable=False),
    sa.Column('course_id', postgresql.UUID(), nullable=False),
    sa.Column('version', sa.BigInteger(), server_default=sa.text('0'), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by', postgresql.UUID(), nullable=True),
    sa.Column('updated_by', postgresql.UUID(), nullable=True),
    sa.Column('properties', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.ForeignKeyConstraint(['course_id'], ['course.id'], onupdate='RESTRICT', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['execution_backend_id'], ['execution_backend.id'], onupdate='RESTRICT', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('execution_backend_id', 'course_id')
    )
    op.create_table('course_group',
    sa.Column('id', postgresql.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('version', sa.BigInteger(), server_default=sa.text('0'), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by', postgresql.UUID(), nullable=True),
    sa.Column('updated_by', postgresql.UUID(), nullable=True),
    sa.Column('properties', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('title', sa.String(length=255), nullable=True),
    sa.Column('description', sa.String(length=4096), nullable=True),
    sa.Column('course_id', postgresql.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['course_id'], ['course.id'], onupdate='RESTRICT', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['created_by'], ['user.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['updated_by'], ['user.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('course_group_course_id_key', 'course_group', ['course_id', 'id'], unique=True)
    op.create_index('course_group_title_key', 'course_group', ['course_id', 'title'], unique=True)
    op.create_table('course_content',
    sa.Column('id', postgresql.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('version', sa.BigInteger(), server_default=sa.text('0'), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by', postgresql.UUID(), nullable=True),
    sa.Column('updated_by', postgresql.UUID(), nullable=True),
    sa.Column('properties', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('archived_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('title', sa.String(length=255), nullable=True),
    sa.Column('description', sa.String(length=4096), nullable=True),
    sa.Column('path', sqlalchemy_utils.types.ltree.LtreeType(), nullable=False),
    sa.Column('course_id', postgresql.UUID(), nullable=False),
    sa.Column('course_content_type_id', postgresql.UUID(), nullable=False),
    sa.Column('version_identifier', sa.String(length=2048), nullable=False),
    sa.Column('position', sa.Float(precision=53), nullable=False),
    sa.Column('max_group_size', sa.Integer(), nullable=False),
    sa.Column('max_test_runs', sa.Integer(), nullable=True),
    sa.Column('max_submissions', sa.Integer(), nullable=True),
    sa.Column('execution_backend_id', postgresql.UUID(), nullable=True),
    sa.ForeignKeyConstraint(['course_content_type_id'], ['course_content_type.id'], onupdate='RESTRICT', ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['course_id', 'course_content_type_id'], ['course_content_type.course_id', 'course_content_type.id'], onupdate='RESTRICT', ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['course_id'], ['course.id'], onupdate='RESTRICT', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['created_by'], ['user.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['execution_backend_id'], ['execution_backend.id'], onupdate='RESTRICT', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['updated_by'], ['user.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('course_content_path_key', 'course_content', ['course_id', 'path'], unique=True)
    op.create_table('course_member',
    sa.Column('id', postgresql.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('version', sa.BigInteger(), server_default=sa.text('0'), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by', postgresql.UUID(), nullable=True),
    sa.Column('updated_by', postgresql.UUID(), nullable=True),
    sa.Column('properties', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('user_id', postgresql.UUID(), nullable=False),
    sa.Column('course_id', postgresql.UUID(), nullable=False),
    sa.Column('course_group_id', postgresql.UUID(), nullable=True),
    sa.Column('course_role_id', sa.String(length=255), nullable=False),
    sa.CheckConstraint("\n            CASE\n                WHEN ((course_role_id)::text = '_student'::text) THEN (course_group_id IS NOT NULL)\n                ELSE true\n            END"),
    sa.ForeignKeyConstraint(['course_group_id'], ['course_group.id'], onupdate='RESTRICT', ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['course_id', 'course_group_id'], ['course_group.course_id', 'course_group.id'], onupdate='RESTRICT', ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['course_id'], ['course.id'], onupdate='RESTRICT', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['course_role_id'], ['course_role.id'], onupdate='RESTRICT', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['created_by'], ['user.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['updated_by'], ['user.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], onupdate='RESTRICT', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('course_member_key', 'course_member', ['user_id', 'course_id'], unique=True)
    op.create_table('codeability_message',
    sa.Column('id', postgresql.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('version', sa.BigInteger(), server_default=sa.text('0'), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by', postgresql.UUID(), nullable=True),
    sa.Column('updated_by', postgresql.UUID(), nullable=True),
    sa.Column('properties', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('archived_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('course_id', postgresql.UUID(), nullable=False),
    sa.Column('transmitter_course_member_id', postgresql.UUID(), nullable=False),
    sa.Column('parent_id', postgresql.UUID(), nullable=True),
    sa.Column('level', sa.Integer(), nullable=False),
    sa.Column('title', sa.String(length=255), nullable=False),
    sa.Column('content', sa.String(length=16384), nullable=False),
    sa.ForeignKeyConstraint(['course_id'], ['course.id'], onupdate='RESTRICT', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['created_by'], ['user.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['parent_id'], ['codeability_message.id'], onupdate='RESTRICT', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['transmitter_course_member_id'], ['course_member.id'], onupdate='RESTRICT', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['updated_by'], ['user.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('msg_course_archived_idx', 'codeability_message', ['course_id', 'archived_at'], unique=False)
    op.create_index('msg_parent_archived_idx', 'codeability_message', ['parent_id', 'archived_at'], unique=False)
    op.create_index('msg_transmitter_archived_idx', 'codeability_message', ['transmitter_course_member_id', 'archived_at'], unique=False)
    op.create_table('course_member_comment',
    sa.Column('id', postgresql.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('version', sa.BigInteger(), server_default=sa.text('0'), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by', postgresql.UUID(), nullable=True),
    sa.Column('updated_by', postgresql.UUID(), nullable=True),
    sa.Column('message', sa.String(length=4096), nullable=False),
    sa.Column('transmitter_id', postgresql.UUID(), nullable=False),
    sa.Column('course_member_id', postgresql.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['course_member_id'], ['course_member.id'], onupdate='RESTRICT', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['created_by'], ['user.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['transmitter_id'], ['course_member.id'], onupdate='RESTRICT', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['updated_by'], ['user.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_course_member_comment_course_member_id'), 'course_member_comment', ['course_member_id'], unique=False)
    op.create_index(op.f('ix_course_member_comment_transmitter_id'), 'course_member_comment', ['transmitter_id'], unique=False)
    op.create_table('course_submission_group',
    sa.Column('id', postgresql.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('version', sa.BigInteger(), server_default=sa.text('0'), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by', postgresql.UUID(), nullable=True),
    sa.Column('updated_by', postgresql.UUID(), nullable=True),
    sa.Column('properties', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('status', sa.String(length=2048), nullable=True),
    sa.Column('grading', sa.Float(precision=53), nullable=True),
    sa.Column('max_group_size', sa.Integer(), nullable=False),
    sa.Column('max_test_runs', sa.Integer(), nullable=True),
    sa.Column('max_submissions', sa.Integer(), nullable=True),
    sa.Column('course_id', postgresql.UUID(), nullable=False),
    sa.Column('course_content_id', postgresql.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['course_content_id'], ['course_content.id'], onupdate='RESTRICT', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['course_id'], ['course.id'], onupdate='RESTRICT', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['created_by'], ['user.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['updated_by'], ['user.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('codeability_message_read',
    sa.Column('id', postgresql.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('version', sa.BigInteger(), server_default=sa.text('0'), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by', postgresql.UUID(), nullable=True),
    sa.Column('updated_by', postgresql.UUID(), nullable=True),
    sa.Column('properties', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('codeability_message_id', postgresql.UUID(), nullable=False),
    sa.Column('course_member_id', postgresql.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['codeability_message_id'], ['codeability_message.id'], onupdate='RESTRICT', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['course_member_id'], ['course_member.id'], onupdate='RESTRICT', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['created_by'], ['user.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['updated_by'], ['user.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('msg_read_unique_idx', 'codeability_message_read', ['codeability_message_id', 'course_member_id'], unique=True)
    op.create_table('course_submission_group_member',
    sa.Column('id', postgresql.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('version', sa.BigInteger(), server_default=sa.text('0'), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by', postgresql.UUID(), nullable=True),
    sa.Column('updated_by', postgresql.UUID(), nullable=True),
    sa.Column('properties', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('grading', sa.Float(precision=53), nullable=True),
    sa.Column('course_id', postgresql.UUID(), nullable=False),
    sa.Column('course_submission_group_id', postgresql.UUID(), nullable=False),
    sa.Column('course_member_id', postgresql.UUID(), nullable=False),
    sa.Column('course_content_id', postgresql.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['course_content_id'], ['course_content.id'], onupdate='RESTRICT', ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['course_id'], ['course.id'], onupdate='RESTRICT', ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['course_member_id'], ['course_member.id'], onupdate='RESTRICT', ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['course_submission_group_id'], ['course_submission_group.id'], onupdate='RESTRICT', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['created_by'], ['user.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['updated_by'], ['user.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('course_submission_group_course_content_key', 'course_submission_group_member', ['course_member_id', 'course_content_id'], unique=True)
    op.create_index('course_submission_group_member_key', 'course_submission_group_member', ['course_submission_group_id', 'course_member_id'], unique=True)
    op.create_index(op.f('ix_course_submission_group_member_course_id'), 'course_submission_group_member', ['course_id'], unique=False)
    op.create_table('result',
    sa.Column('id', postgresql.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('version', sa.BigInteger(), server_default=sa.text('0'), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by', postgresql.UUID(), nullable=True),
    sa.Column('updated_by', postgresql.UUID(), nullable=True),
    sa.Column('properties', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('submit', sa.Boolean(), nullable=False),
    sa.Column('course_member_id', postgresql.UUID(), nullable=False),
    sa.Column('course_submission_group_id', postgresql.UUID(), nullable=True),
    sa.Column('course_content_id', postgresql.UUID(), nullable=False),
    sa.Column('course_content_type_id', postgresql.UUID(), nullable=False),
    sa.Column('execution_backend_id', postgresql.UUID(), nullable=False),
    sa.Column('test_system_id', sa.String(length=255), nullable=False),
    sa.Column('result', sa.Float(precision=53), nullable=False),
    sa.Column('result_json', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('version_identifier', sa.String(length=2048), nullable=False),
    sa.Column('status', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['course_content_id'], ['course_content.id'], onupdate='RESTRICT', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['course_content_type_id'], ['course_content_type.id'], onupdate='RESTRICT', ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['course_member_id'], ['course_member.id'], onupdate='RESTRICT', ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['course_submission_group_id'], ['course_submission_group.id'], onupdate='RESTRICT', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['created_by'], ['user.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['execution_backend_id'], ['execution_backend.id'], onupdate='RESTRICT', ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['updated_by'], ['user.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_result_course_content_id'), 'result', ['course_content_id'], unique=False)
    op.create_index(op.f('ix_result_course_member_id'), 'result', ['course_member_id'], unique=False)
    op.create_index(op.f('ix_result_course_submission_group_id'), 'result', ['course_submission_group_id'], unique=False)
    op.create_index('result_commit_test_system_key', 'result', ['test_system_id', 'execution_backend_id'], unique=True)
    op.create_index('result_version_identifier_group_key', 'result', ['course_submission_group_id', 'version_identifier'], unique=True)
    op.create_index('result_version_identifier_member_key', 'result', ['course_member_id', 'version_identifier'], unique=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('result_version_identifier_member_key', table_name='result')
    op.drop_index('result_version_identifier_group_key', table_name='result')
    op.drop_index('result_commit_test_system_key', table_name='result')
    op.drop_index(op.f('ix_result_course_submission_group_id'), table_name='result')
    op.drop_index(op.f('ix_result_course_member_id'), table_name='result')
    op.drop_index(op.f('ix_result_course_content_id'), table_name='result')
    op.drop_table('result')
    op.drop_index(op.f('ix_course_submission_group_member_course_id'), table_name='course_submission_group_member')
    op.drop_index('course_submission_group_member_key', table_name='course_submission_group_member')
    op.drop_index('course_submission_group_course_content_key', table_name='course_submission_group_member')
    op.drop_table('course_submission_group_member')
    op.drop_index('msg_read_unique_idx', table_name='codeability_message_read')
    op.drop_table('codeability_message_read')
    op.drop_table('course_submission_group')
    op.drop_index(op.f('ix_course_member_comment_transmitter_id'), table_name='course_member_comment')
    op.drop_index(op.f('ix_course_member_comment_course_member_id'), table_name='course_member_comment')
    op.drop_table('course_member_comment')
    op.drop_index('msg_transmitter_archived_idx', table_name='codeability_message')
    op.drop_index('msg_parent_archived_idx', table_name='codeability_message')
    op.drop_index('msg_course_archived_idx', table_name='codeability_message')
    op.drop_table('codeability_message')
    op.drop_index('course_member_key', table_name='course_member')
    op.drop_table('course_member')
    op.drop_index('course_content_path_key', table_name='course_content')
    op.drop_table('course_content')
    op.drop_index('course_group_title_key', table_name='course_group')
    op.drop_index('course_group_course_id_key', table_name='course_group')
    op.drop_table('course_group')
    op.drop_table('course_execution_backend')
    op.drop_index('course_content_type_slug_key', table_name='course_content_type')
    op.drop_index('course_content_type_course_id_key', table_name='course_content_type')
    op.drop_table('course_content_type')
    op.drop_index('course_path_key', table_name='course')
    op.drop_table('course')
    op.drop_index('course_family_path_key', table_name='course_family')
    op.drop_table('course_family')
    op.drop_table('user_role')
    op.drop_table('user_group')
    op.drop_table('student_profile')
    op.drop_table('session')
    op.drop_table('role_claim')
    op.drop_table('profile')
    op.drop_table('example')
    op.drop_table('example_repository')
    op.drop_index('organization_path_key', table_name='organization')
    op.drop_index('organization_number_key', table_name='organization')
    op.drop_index(op.f('ix_organization_path'), table_name='organization')
    op.drop_index(op.f('ix_organization_organization_type'), table_name='organization')
    op.drop_table('organization')
    op.drop_table('group_claim')
    op.drop_table('execution_backend')
    op.drop_index(op.f('ix_account_user_id'), table_name='account')
    op.drop_index('account_provider_type_user_id_key', table_name='account')
    op.drop_index('account_provider_type_provider_account_id_key', table_name='account')
    op.drop_table('account')
    op.drop_table('user')
    op.drop_table('role')
    op.drop_table('group')
    op.drop_table('course_role')
    op.drop_table('course_content_kind')
    # ### end Alembic commands ###
    
    # Drop sequences
    op.execute("DROP SEQUENCE IF EXISTS user_unique_fs_number_seq;")
    
    # Drop functions
    op.execute("DROP FUNCTION IF EXISTS ctutor_valid_slug CASCADE;")
    
    # Drop types
    op.execute("DROP TYPE IF EXISTS ctutor_group_type CASCADE;")
    op.execute("DROP TYPE IF EXISTS user_type CASCADE;")
    op.execute("DROP TYPE IF EXISTS organization_type CASCADE;")
    
    # Drop extensions
    op.execute("DROP EXTENSION IF EXISTS pgcrypto CASCADE;")
    op.execute("DROP EXTENSION IF EXISTS ltree CASCADE;")
    op.execute("DROP EXTENSION IF EXISTS \"uuid-ossp\" CASCADE;")
