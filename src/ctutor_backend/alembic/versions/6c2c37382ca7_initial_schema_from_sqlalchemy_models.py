"""initial_schema_from_sqlalchemy_models

Revision ID: 6c2c37382ca7
Revises: 
Create Date: 2025-07-11 17:53:35.920181

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
import sqlalchemy_utils

# revision identifiers, used by Alembic.
revision: str = '6c2c37382ca7'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # Create PostgreSQL extensions
    op.execute("CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";")
    op.execute("CREATE EXTENSION IF NOT EXISTS ltree;")
    op.execute("CREATE EXTENSION IF NOT EXISTS pgcrypto;")
    
    # Create enums (excluding ctutor_color which will be VARCHAR)
    op.execute("""
        CREATE TYPE organization_type AS ENUM ('user', 'community', 'organization');
        CREATE TYPE user_type AS ENUM ('user', 'token');
        CREATE TYPE ctutor_group_type AS ENUM ('fixed', 'dynamic');
    """)
    
    # Create utility functions (with updated slug function that allows underscores)
    op.execute("""
        CREATE OR REPLACE FUNCTION ctutor_valid_slug(value text) 
        RETURNS boolean 
        LANGUAGE plpgsql 
        AS $function$
        BEGIN
            -- Check if the value matches the slug pattern (allow underscores and hyphens)
            RETURN value ~ '^[a-z0-9]+([_-][a-z0-9]+)*$';
        END;
        $function$;
    """)
    
    # Create sequences
    op.execute("CREATE SEQUENCE IF NOT EXISTS user_unique_fs_number_seq;")
    
    # Create tables
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('course_content_kind',
    sa.Column('id', sa.String(length=255), nullable=False),
    sa.Column('title', sa.String(length=255), nullable=True),
    sa.Column('description', sa.String(length=4096), nullable=True),
    sa.Column('has_ascendants', sa.Boolean(), nullable=False),
    sa.Column('has_descendants', sa.Boolean(), nullable=False),
    sa.Column('submittable', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('course_role',
    sa.Column('id', sa.String(length=255), nullable=False),
    sa.Column('title', sa.String(length=255), nullable=True),
    sa.Column('description', sa.String(length=4096), nullable=True),
    sa.Column('builtin', sa.Boolean(), server_default=sa.text('false'), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('group',
    sa.Column('id', postgresql.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('version', sa.BigInteger(), server_default=sa.text('0'), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by', postgresql.UUID(), nullable=True),
    sa.Column('updated_by', postgresql.UUID(), nullable=True),
    sa.Column('properties', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('title', sa.String(length=255), nullable=True),
    sa.Column('description', sa.String(length=4096), nullable=True),
    sa.Column('slug', sa.String(length=255), nullable=False),
    sa.Column('type', postgresql.ENUM(name='ctutor_group_type', create_type=False), server_default=sa.text("'fixed'::ctutor_group_type"), nullable=True),
    sa.CheckConstraint('ctutor_valid_slug((slug)::text)'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('role',
    sa.Column('id', sa.String(length=255), nullable=False),
    sa.Column('title', sa.String(length=255), nullable=True),
    sa.Column('description', sa.String(length=4096), nullable=True),
    sa.Column('builtin', sa.Boolean(), server_default=sa.text('false'), nullable=False),
    sa.CheckConstraint("(NOT builtin) OR ((id)::text ~ '^_'::text)"),
    sa.CheckConstraint('(builtin AND ctutor_valid_slug(SUBSTRING(id FROM 2))) OR ((NOT builtin) AND ctutor_valid_slug((id)::text))'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('user',
    sa.Column('number', sa.String(length=255), nullable=True),
    sa.Column('id', postgresql.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('version', sa.BigInteger(), server_default=sa.text('0'), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by', postgresql.UUID(), nullable=True),
    sa.Column('updated_by', postgresql.UUID(), nullable=True),
    sa.Column('properties', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('archived_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('given_name', sa.String(length=255), nullable=True),
    sa.Column('family_name', sa.String(length=255), nullable=True),
    sa.Column('email', sa.String(length=320), nullable=True),
    sa.Column('user_type', postgresql.ENUM(name='user_type', create_type=False), server_default=sa.text("'user'::user_type"), nullable=False),
    sa.Column('fs_number', sa.BigInteger(), server_default=sa.text("nextval('user_unique_fs_number_seq'::regclass)"), nullable=False),
    sa.Column('token_expiration', sa.DateTime(timezone=True), nullable=True),
    sa.Column('username', sa.String(length=255), nullable=True),
    sa.Column('password', sa.String(length=255), nullable=True),
    sa.Column('auth_token', sa.String(length=4096), nullable=True),
    sa.CheckConstraint("(user_type <> 'token') OR (token_expiration IS NOT NULL)", name='ck_user_token_expiration'),
    sa.ForeignKeyConstraint(['created_by'], ['user.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['updated_by'], ['user.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email'),
    sa.UniqueConstraint('number'),
    sa.UniqueConstraint('username')
    )
    op.create_table('account',
    sa.Column('id', postgresql.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('version', sa.BigInteger(), server_default=sa.text('0'), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by', postgresql.UUID(), nullable=True),
    sa.Column('updated_by', postgresql.UUID(), nullable=True),
    sa.Column('properties', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('provider', sa.String(length=255), nullable=False),
    sa.Column('type', sa.String(length=63), nullable=False),
    sa.Column('provider_account_id', sa.String(length=255), nullable=False),
    sa.Column('user_id', postgresql.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], onupdate='RESTRICT', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('account_provider_type_provider_account_id_key', 'account', ['provider', 'type', 'provider_account_id'], unique=True)
    op.create_index('account_provider_type_user_id_key', 'account', ['provider', 'type', 'user_id'], unique=True)
    op.create_index(op.f('ix_account_user_id'), 'account', ['user_id'], unique=False)
    op.create_table('execution_backend',
    sa.Column('id', postgresql.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('version', sa.BigInteger(), server_default=sa.text('0'), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by', postgresql.UUID(), nullable=True),
    sa.Column('updated_by', postgresql.UUID(), nullable=True),
    sa.Column('properties', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('type', sa.String(length=255), nullable=False),
    sa.Column('slug', sa.String(length=255), nullable=False),
    sa.CheckConstraint("(slug)::text ~* '^[A-Za-z0-9_.-]+$'::text"),
    sa.ForeignKeyConstraint(['created_by'], ['user.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['updated_by'], ['user.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('slug')
    )
    op.create_table('group_claim',
    sa.Column('group_id', postgresql.UUID(), nullable=False),
    sa.Column('claim_type', sa.String(length=255), nullable=False),
    sa.Column('claim_value', sa.String(length=255), nullable=False),
    sa.Column('version', sa.BigInteger(), server_default=sa.text('0'), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by', postgresql.UUID(), nullable=True),
    sa.Column('updated_by', postgresql.UUID(), nullable=True),
    sa.Column('properties', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.ForeignKeyConstraint(['group_id'], ['group.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('group_id', 'claim_type', 'claim_value')
    )
    op.create_table('organization',
    sa.Column('id', postgresql.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('version', sa.BigInteger(), server_default=sa.text('0'), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by', postgresql.UUID(), nullable=True),
    sa.Column('updated_by', postgresql.UUID(), nullable=True),
    sa.Column('properties', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('number', sa.String(length=255), nullable=True),
    sa.Column('title', sa.String(length=255), nullable=True),
    sa.Column('description', sa.String(length=4096), nullable=True),
    sa.Column('archived_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('email', sa.String(length=320), nullable=True),
    sa.Column('telephone', sa.String(length=255), nullable=True),
    sa.Column('fax_number', sa.String(length=255), nullable=True),
    sa.Column('url', sa.String(length=2048), nullable=True),
    sa.Column('postal_code', sa.String(length=255), nullable=True),
    sa.Column('street_address', sa.String(length=1024), nullable=True),
    sa.Column('locality', sa.String(length=255), nullable=True),
    sa.Column('region', sa.String(length=255), nullable=True),
    sa.Column('country', sa.String(length=255), nullable=True),
    sa.Column('organization_type', postgresql.ENUM(name='organization_type', create_type=False), nullable=False),
    sa.Column('user_id', postgresql.UUID(), nullable=True),
    sa.Column('path', sqlalchemy_utils.types.ltree.LtreeType(), nullable=False),
    sa.Column('parent_path', sqlalchemy_utils.types.ltree.LtreeType(), sa.Computed('\n        CASE\n            WHEN (nlevel(path) > 1) THEN subpath(path, 0, (nlevel(path) - 1))\n            ELSE NULL::ltree\n        END\n    ', persisted=True), nullable=True),
    sa.CheckConstraint("((organization_type = 'user'::organization_type) AND (title IS NULL)) OR ((organization_type <> 'user'::organization_type) AND (title IS NOT NULL))"),
    sa.CheckConstraint("((organization_type = 'user'::organization_type) AND (user_id IS NOT NULL)) OR ((organization_type <> 'user'::organization_type) AND (user_id IS NULL))"),
    sa.ForeignKeyConstraint(['created_by'], ['user.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['updated_by'], ['user.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], onupdate='RESTRICT', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id')
    )
    op.create_index(op.f('ix_organization_organization_type'), 'organization', ['organization_type'], unique=False)
    op.create_index(op.f('ix_organization_path'), 'organization', ['path'], unique=False)
    op.create_index('organization_number_key', 'organization', ['organization_type', 'number'], unique=True)
    op.create_index('organization_path_key', 'organization', ['organization_type', 'path'], unique=True)
    op.create_table('example_repository',
    sa.Column('id', postgresql.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False, comment='Human-readable name of the repository'),
    sa.Column('description', sa.Text(), nullable=True, comment='Description of the repository and its contents'),
    sa.Column('source_type', sa.String(length=20), nullable=False, default='git', comment='Type of repository source: git, minio, github, etc.'),
    sa.Column('source_url', sa.Text(), nullable=False, comment='Repository URL (Git URL, MinIO path, etc.)'),
    sa.Column('access_credentials', sa.Text(), nullable=True, comment='Encrypted access credentials (Git token, MinIO credentials JSON, etc.)'),
    sa.Column('default_version', sa.String(length=100), nullable=True, comment='Default version to sync from (branch for Git, optional for MinIO)'),
    sa.Column('organization_id', postgresql.UUID(), nullable=True, comment='Organization that owns this repository'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by', postgresql.UUID(), nullable=True, comment='User who created this repository'),
    sa.Column('updated_by', postgresql.UUID(), nullable=True, comment='User who last updated this repository'),
    sa.CheckConstraint("source_type IN ('git', 'minio', 'github', 's3', 'gitlab')", name='check_source_type'),
    sa.ForeignKeyConstraint(['created_by'], ['user.id'], ),
    sa.ForeignKeyConstraint(['organization_id'], ['organization.id'], ),
    sa.ForeignKeyConstraint(['updated_by'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('source_url')
    )
    op.create_table('example',
    sa.Column('id', postgresql.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('example_repository_id', postgresql.UUID(), nullable=False, comment='Reference to the repository containing this example'),
    sa.Column('directory', sa.String(length=255), nullable=False, comment="Name of the directory containing this example (e.g., 'hello-world')"),
    sa.Column('identifier', sqlalchemy_utils.types.ltree.LtreeType(), nullable=False, comment='Hierarchical identifier using dots as separators'),
    sa.Column('title', sa.String(length=255), nullable=False, comment='Human-readable title of the example'),
    sa.Column('description', sa.Text(), nullable=True, comment='Detailed description of the example'),
    sa.Column('category', sa.String(length=100), nullable=True, comment='Category for grouping examples'),
    sa.Column('tags', postgresql.ARRAY(sa.String()), nullable=False, server_default='{}', comment='Tags for searching and filtering'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by', postgresql.UUID(), nullable=True, comment='User who created this example record'),
    sa.Column('updated_by', postgresql.UUID(), nullable=True, comment='User who last updated this example record'),
    sa.CheckConstraint("directory ~ '^[a-zA-Z0-9._-]+$'", name='check_directory_format'),
    sa.ForeignKeyConstraint(['created_by'], ['user.id'], ),
    sa.ForeignKeyConstraint(['example_repository_id'], ['example_repository.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['updated_by'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('example_repository_id', 'directory', name='unique_example_per_directory'),
    sa.UniqueConstraint('example_repository_id', 'identifier', name='unique_example_per_identifier')
    )
    op.create_table('profile',
    sa.Column('id', postgresql.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('version', sa.BigInteger(), server_default=sa.text('0'), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by', postgresql.UUID(), nullable=True),
    sa.Column('updated_by', postgresql.UUID(), nullable=True),
    sa.Column('properties', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('avatar_color', sa.Integer(), nullable=True),
    sa.Column('avatar_image', sa.String(length=2048), nullable=True),
    sa.Column('nickname', sa.String(length=255), nullable=True),
    sa.Column('bio', sa.String(length=16384), nullable=True),
    sa.Column('url', sa.String(length=2048), nullable=True),
    sa.Column('user_id', postgresql.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], onupdate='RESTRICT', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('nickname'),
    sa.UniqueConstraint('user_id')
    )
    op.create_table('role_claim',
    sa.Column('role_id', sa.String(length=255), nullable=False),
    sa.Column('claim_type', sa.String(length=255), nullable=False),
    sa.Column('claim_value', sa.String(length=255), nullable=False),
    sa.Column('version', sa.BigInteger(), server_default=sa.text('0'), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by', postgresql.UUID(), nullable=True),
    sa.Column('updated_by', postgresql.UUID(), nullable=True),
    sa.Column('properties', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.ForeignKeyConstraint(['role_id'], ['role.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('role_id', 'claim_type', 'claim_value')
    )
    op.create_table('session',
    sa.Column('id', postgresql.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('version', sa.BigInteger(), server_default=sa.text('0'), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by', postgresql.UUID(), nullable=True),
    sa.Column('updated_by', postgresql.UUID(), nullable=True),
    sa.Column('properties', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('user_id', postgresql.UUID(), nullable=False),
    sa.Column('session_id', sa.String(length=1024), nullable=False),
    sa.Column('logout_time', sa.DateTime(timezone=True), nullable=True),
    sa.Column('ip_address', postgresql.INET(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], onupdate='RESTRICT', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('student_profile',
    sa.Column('id', postgresql.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('version', sa.BigInteger(), server_default=sa.text('0'), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by', postgresql.UUID(), nullable=True),
    sa.Column('updated_by', postgresql.UUID(), nullable=True),
    sa.Column('properties', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('student_id', sa.String(length=255), nullable=True),
    sa.Column('student_email', sa.String(length=320), nullable=True),
    sa.Column('user_id', postgresql.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], onupdate='RESTRICT', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('student_email'),
    sa.UniqueConstraint('student_id'),
    sa.UniqueConstraint('user_id')
    )
    op.create_table('user_group',
    sa.Column('user_id', postgresql.UUID(), nullable=False),
    sa.Column('group_id', postgresql.UUID(), nullable=False),
    sa.Column('transient', sa.Boolean(), server_default=sa.text('false'), nullable=True),
    sa.Column('version', sa.BigInteger(), server_default=sa.text('0'), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by', postgresql.UUID(), nullable=True),
    sa.Column('updated_by', postgresql.UUID(), nullable=True),
    sa.ForeignKeyConstraint(['group_id'], ['group.id'], onupdate='CASCADE', ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('user_id', 'group_id')
    )
    op.create_table('user_role',
    sa.Column('user_id', postgresql.UUID(), nullable=False),
    sa.Column('role_id', sa.String(length=255), nullable=False),
    sa.Column('transient', sa.Boolean(), server_default=sa.text('false'), nullable=True),
    sa.Column('version', sa.BigInteger(), server_default=sa.text('0'), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by', postgresql.UUID(), nullable=True),
    sa.Column('updated_by', postgresql.UUID(), nullable=True),
    sa.ForeignKeyConstraint(['role_id'], ['role.id'], onupdate='CASCADE', ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('user_id', 'role_id')
    )
    op.create_table('course_family',
    sa.Column('id', postgresql.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('version', sa.BigInteger(), server_default=sa.text('0'), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by', postgresql.UUID(), nullable=True),
    sa.Column('updated_by', postgresql.UUID(), nullable=True),
    sa.Column('properties', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('title', sa.String(length=255), nullable=True),
    sa.Column('description', sa.String(length=4096), nullable=True),
    sa.Column('path', sqlalchemy_utils.types.ltree.LtreeType(), nullable=False),
    sa.Column('organization_id', postgresql.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['created_by'], ['user.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['organization_id'], ['organization.id'], onupdate='RESTRICT', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['updated_by'], ['user.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('course_family_path_key', 'course_family', ['organization_id', 'path'], unique=True)
    op.create_table('course',
    sa.Column('id', postgresql.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('version', sa.BigInteger(), server_default=sa.text('0'), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by', postgresql.UUID(), nullable=True),
    sa.Column('updated_by', postgresql.UUID(), nullable=True),
    sa.Column('properties', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('title', sa.String(length=255), nullable=True),
    sa.Column('description', sa.String(length=4096), nullable=True),
    sa.Column('path', sqlalchemy_utils.types.ltree.LtreeType(), nullable=False),
    sa.Column('course_family_id', postgresql.UUID(), nullable=False),
    sa.Column('organization_id', postgresql.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['course_family_id'], ['course_family.id'], onupdate='RESTRICT', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['created_by'], ['user.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['organization_id'], ['organization.id'], onupdate='RESTRICT', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['updated_by'], ['user.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('course_path_key', 'course', ['course_family_id', 'path'], unique=True)
    op.create_table('course_content_type',
    sa.Column('id', postgresql.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('version', sa.BigInteger(), server_default=sa.text('0'), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by', postgresql.UUID(), nullable=True),
    sa.Column('updated_by', postgresql.UUID(), nullable=True),
    sa.Column('properties', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('title', sa.String(length=255), nullable=True),
    sa.Column('description', sa.String(length=4096), nullable=True),
    sa.Column('slug', sa.String(length=255), nullable=False),
    sa.Column('color', sa.String(length=255), nullable=True),
    sa.Column('course_content_kind_id', sa.String(length=255), nullable=False),
    sa.Column('course_id', postgresql.UUID(), nullable=False),
    sa.CheckConstraint("(slug)::text ~* '^[A-Za-z0-9_.-]+$'::text"),
    sa.ForeignKeyConstraint(['course_content_kind_id'], ['course_content_kind.id'], onupdate='RESTRICT', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['course_id'], ['course.id'], onupdate='RESTRICT', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['created_by'], ['user.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['updated_by'], ['user.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('course_content_type_course_id_key', 'course_content_type', ['id', 'course_id'], unique=True)
    op.create_index('course_content_type_slug_key', 'course_content_type', ['slug', 'course_id', 'course_content_kind_id'], unique=True)
    op.create_table('course_execution_backend',
    sa.Column('execution_backend_id', postgresql.UUID(), nullable=False),
    sa.Column('course_id', postgresql.UUID(), nullable=False),
    sa.Column('version', sa.BigInteger(), server_default=sa.text('0'), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by', postgresql.UUID(), nullable=True),
    sa.Column('updated_by', postgresql.UUID(), nullable=True),
    sa.Column('properties', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.ForeignKeyConstraint(['course_id'], ['course.id'], onupdate='RESTRICT', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['execution_backend_id'], ['execution_backend.id'], onupdate='RESTRICT', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('execution_backend_id', 'course_id')
    )
    op.create_table('course_group',
    sa.Column('id', postgresql.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('version', sa.BigInteger(), server_default=sa.text('0'), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by', postgresql.UUID(), nullable=True),
    sa.Column('updated_by', postgresql.UUID(), nullable=True),
    sa.Column('properties', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('title', sa.String(length=255), nullable=True),
    sa.Column('description', sa.String(length=4096), nullable=True),
    sa.Column('course_id', postgresql.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['course_id'], ['course.id'], onupdate='RESTRICT', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['created_by'], ['user.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['updated_by'], ['user.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('course_group_course_id_key', 'course_group', ['course_id', 'id'], unique=True)
    op.create_index('course_group_title_key', 'course_group', ['course_id', 'title'], unique=True)
    op.create_table('course_content',
    sa.Column('id', postgresql.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('version', sa.BigInteger(), server_default=sa.text('0'), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by', postgresql.UUID(), nullable=True),
    sa.Column('updated_by', postgresql.UUID(), nullable=True),
    sa.Column('properties', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('archived_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('title', sa.String(length=255), nullable=True),
    sa.Column('description', sa.String(length=4096), nullable=True),
    sa.Column('path', sqlalchemy_utils.types.ltree.LtreeType(), nullable=False),
    sa.Column('course_id', postgresql.UUID(), nullable=False),
    sa.Column('course_content_type_id', postgresql.UUID(), nullable=False),
    sa.Column('position', sa.Float(precision=53), nullable=False),
    sa.Column('max_group_size', sa.Integer(), nullable=True),
    sa.Column('max_test_runs', sa.Integer(), nullable=True),
    sa.Column('max_submissions', sa.Integer(), nullable=True),
    sa.Column('execution_backend_id', postgresql.UUID(), nullable=True),
    sa.Column('example_version_id', postgresql.UUID(), nullable=True, comment='Reference to specific ExampleVersion'),
    sa.ForeignKeyConstraint(['course_content_type_id'], ['course_content_type.id'], onupdate='RESTRICT', ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['course_id', 'course_content_type_id'], ['course_content_type.course_id', 'course_content_type.id'], onupdate='RESTRICT', ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['course_id'], ['course.id'], onupdate='RESTRICT', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['created_by'], ['user.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['execution_backend_id'], ['execution_backend.id'], onupdate='RESTRICT', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['updated_by'], ['user.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('course_content_path_key', 'course_content', ['course_id', 'path'], unique=True)
    op.create_table('example_version',
    sa.Column('id', postgresql.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('example_id', postgresql.UUID(), nullable=False, comment='Reference to the example this version belongs to'),
    sa.Column('version_tag', sa.String(length=64), nullable=False, comment="Version identifier (e.g., 'v1.0', 'v2.0-beta', commit hash)"),
    sa.Column('version_number', sa.Integer(), nullable=False, comment='Sequential version number for ordering'),
    sa.Column('storage_path', sa.Text(), nullable=False, comment='Path in storage system (MinIO path, S3 key, etc.)'),
    sa.Column('meta_yaml', sa.Text(), nullable=False, comment='Content of meta.yaml file for this version'),
    sa.Column('test_yaml', sa.Text(), nullable=True, comment='Content of test.yaml file for this version (optional)'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by', postgresql.UUID(), nullable=True, comment='User who created this version'),
    sa.ForeignKeyConstraint(['created_by'], ['user.id'], ),
    sa.ForeignKeyConstraint(['example_id'], ['example.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('example_id', 'version_tag', name='unique_example_version_tag'),
    sa.UniqueConstraint('example_id', 'version_number', name='unique_example_version_number')
    )
    # Add FK from course_content.example_version_id to example_version.id
    op.create_foreign_key(
        'course_content_example_version_id_fkey',
        'course_content',
        'example_version',
        ['example_version_id'],
        ['id'],
        ondelete='SET NULL',
        onupdate='RESTRICT'
    )
    op.create_table('example_dependency',
    sa.Column('id', postgresql.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('example_id', postgresql.UUID(), nullable=False, comment='Example that has the dependency'),
    sa.Column('depends_id', postgresql.UUID(), nullable=False, comment='Example that this depends on'),
    sa.Column('version_constraint', sa.String(100), nullable=True, comment="Version constraint (e.g., '>=1.2.0', '^2.1.0', '~1.3.0'). NULL means latest version."),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['depends_id'], ['example.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['example_id'], ['example.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('example_id', 'depends_id', name='unique_example_dependency')
    )
    # Deployment tracking tables
    op.create_table('course_content_deployment',
    sa.Column('id', postgresql.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('course_content_id', postgresql.UUID(), nullable=False, comment='The course content (assignment) this deployment is for'),
    sa.Column('example_version_id', postgresql.UUID(), nullable=True, comment='The specific example version that is/was deployed'),
    sa.Column('deployment_status', sa.String(length=32), server_default=sa.text("'pending'::text"), nullable=False, comment='Status: pending, deploying, deployed, failed, unassigned'),
    sa.Column('deployment_message', sa.Text(), nullable=True, comment='Additional message about deployment (e.g., error details)'),
    sa.Column('assigned_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='When the example was assigned to this content'),
    sa.Column('deployed_at', sa.DateTime(timezone=True), nullable=True, comment='When the deployment was successfully completed'),
    sa.Column('last_attempt_at', sa.DateTime(timezone=True), nullable=True, comment='When the last deployment attempt was made'),
    sa.Column('deployment_path', sa.Text(), nullable=True, comment='Path in the student-template repository where deployed'),
    sa.Column('deployment_metadata', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), nullable=True, comment='Additional deployment data (workflow IDs, file lists, etc.)'),
    sa.Column('workflow_id', sa.String(length=255), nullable=True, comment='Current/last Temporal workflow ID for deployment'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by', postgresql.UUID(), nullable=True),
    sa.Column('updated_by', postgresql.UUID(), nullable=True),
    sa.ForeignKeyConstraint(['course_content_id'], ['course_content.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['example_version_id'], ['example_version.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['created_by'], ['user.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['updated_by'], ['user.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('course_content_id', name='uq_deployment_per_content')
    )
    op.create_index('idx_deployment_status', 'course_content_deployment', ['deployment_status'], unique=False)
    op.create_index('idx_deployment_deployed_at', 'course_content_deployment', ['deployed_at'], unique=False)
    op.create_index('idx_deployment_example_version', 'course_content_deployment', ['example_version_id'], unique=False)

    op.create_table('deployment_history',
    sa.Column('id', postgresql.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('deployment_id', postgresql.UUID(), nullable=False, comment='The deployment this history entry belongs to'),
    sa.Column('action', sa.String(length=32), nullable=False, comment='Action type: assigned, reassigned, deployed, failed, unassigned, updated'),
    sa.Column('action_details', sa.Text(), nullable=True, comment='Detailed description of the action'),
    sa.Column('example_version_id', postgresql.UUID(), nullable=True, comment='The example version involved in this action'),
    sa.Column('previous_example_version_id', postgresql.UUID(), nullable=True, comment='Previous example version (for reassignments)'),
    sa.Column('meta', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), nullable=True, comment='Additional metadata about the action'),
    sa.Column('workflow_id', sa.String(length=255), nullable=True, comment='Temporal workflow ID if action was triggered by workflow'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by', postgresql.UUID(), nullable=True),
    sa.ForeignKeyConstraint(['deployment_id'], ['course_content_deployment.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['example_version_id'], ['example_version.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['previous_example_version_id'], ['example_version.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['created_by'], ['user.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_history_deployment_id', 'deployment_history', ['deployment_id'], unique=False)
    op.create_index('idx_history_action', 'deployment_history', ['action'], unique=False)
    op.create_index('idx_history_created_at', 'deployment_history', ['created_at'], unique=False)
    op.create_index('idx_history_workflow_id', 'deployment_history', ['workflow_id'], unique=False)
    op.create_table('course_member',
    sa.Column('id', postgresql.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('version', sa.BigInteger(), server_default=sa.text('0'), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by', postgresql.UUID(), nullable=True),
    sa.Column('updated_by', postgresql.UUID(), nullable=True),
    sa.Column('properties', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('user_id', postgresql.UUID(), nullable=False),
    sa.Column('course_id', postgresql.UUID(), nullable=False),
    sa.Column('course_group_id', postgresql.UUID(), nullable=True),
    sa.Column('course_role_id', sa.String(length=255), nullable=False),
    sa.CheckConstraint("\n            CASE\n                WHEN ((course_role_id)::text = '_student'::text) THEN (course_group_id IS NOT NULL)\n                ELSE true\n            END"),
    sa.ForeignKeyConstraint(['course_group_id'], ['course_group.id'], onupdate='RESTRICT', ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['course_id', 'course_group_id'], ['course_group.course_id', 'course_group.id'], onupdate='RESTRICT', ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['course_id'], ['course.id'], onupdate='RESTRICT', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['course_role_id'], ['course_role.id'], onupdate='RESTRICT', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['created_by'], ['user.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['updated_by'], ['user.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], onupdate='RESTRICT', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('course_member_key', 'course_member', ['user_id', 'course_id'], unique=True)
    # message table moved below (after course_submission_group creation) to satisfy FKs
    op.create_table('course_member_comment',
    sa.Column('id', postgresql.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('version', sa.BigInteger(), server_default=sa.text('0'), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by', postgresql.UUID(), nullable=True),
    sa.Column('updated_by', postgresql.UUID(), nullable=True),
    sa.Column('message', sa.String(length=4096), nullable=False),
    sa.Column('transmitter_id', postgresql.UUID(), nullable=False),
    sa.Column('course_member_id', postgresql.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['course_member_id'], ['course_member.id'], onupdate='RESTRICT', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['created_by'], ['user.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['transmitter_id'], ['course_member.id'], onupdate='RESTRICT', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['updated_by'], ['user.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_course_member_comment_course_member_id'), 'course_member_comment', ['course_member_id'], unique=False)
    op.create_index(op.f('ix_course_member_comment_transmitter_id'), 'course_member_comment', ['transmitter_id'], unique=False)
    op.create_table('course_submission_group',
    sa.Column('id', postgresql.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('version', sa.BigInteger(), server_default=sa.text('0'), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by', postgresql.UUID(), nullable=True),
    sa.Column('updated_by', postgresql.UUID(), nullable=True),
    sa.Column('properties', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('max_group_size', sa.Integer(), nullable=False),
    sa.Column('max_test_runs', sa.Integer(), nullable=True),
    sa.Column('max_submissions', sa.Integer(), nullable=True),
    sa.Column('course_id', postgresql.UUID(), nullable=False),
    sa.Column('course_content_id', postgresql.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['course_content_id'], ['course_content.id'], onupdate='RESTRICT', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['course_id'], ['course.id'], onupdate='RESTRICT', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['created_by'], ['user.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['updated_by'], ['user.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    # Create messages now that dependent tables exist
    op.create_table('message',
    sa.Column('id', postgresql.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('version', sa.BigInteger(), server_default=sa.text('0'), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by', postgresql.UUID(), nullable=True),
    sa.Column('updated_by', postgresql.UUID(), nullable=True),
    sa.Column('properties', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('archived_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('author_id', postgresql.UUID(), nullable=False),
    sa.Column('parent_id', postgresql.UUID(), nullable=True),
    sa.Column('level', sa.Integer(), nullable=False),
    sa.Column('title', sa.String(length=255), nullable=False),
    sa.Column('content', sa.String(length=16384), nullable=False),
    sa.Column('user_id', postgresql.UUID(), nullable=True),
    sa.Column('course_member_id', postgresql.UUID(), nullable=True),
    sa.Column('course_submission_group_id', postgresql.UUID(), nullable=True),
    sa.Column('course_group_id', postgresql.UUID(), nullable=True),
    sa.ForeignKeyConstraint(['author_id'], ['user.id'], onupdate='RESTRICT', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['created_by'], ['user.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['parent_id'], ['message.id'], onupdate='RESTRICT', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['updated_by'], ['user.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], onupdate='RESTRICT', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['course_member_id'], ['course_member.id'], onupdate='RESTRICT', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['course_submission_group_id'], ['course_submission_group.id'], onupdate='RESTRICT', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['course_group_id'], ['course_group.id'], onupdate='RESTRICT', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('msg_parent_archived_idx', 'message', ['parent_id', 'archived_at'], unique=False)
    op.create_index('msg_author_archived_idx', 'message', ['author_id', 'archived_at'], unique=False)
    op.create_index('msg_user_archived_idx', 'message', ['user_id', 'archived_at'], unique=False)
    op.create_index('msg_course_member_archived_idx', 'message', ['course_member_id', 'archived_at'], unique=False)
    op.create_index('msg_submission_group_archived_idx', 'message', ['course_submission_group_id', 'archived_at'], unique=False)
    op.create_index('msg_course_group_archived_idx', 'message', ['course_group_id', 'archived_at'], unique=False)

    op.create_table('message_read',
    sa.Column('id', postgresql.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('version', sa.BigInteger(), server_default=sa.text('0'), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by', postgresql.UUID(), nullable=True),
    sa.Column('updated_by', postgresql.UUID(), nullable=True),
    sa.Column('properties', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('message_id', postgresql.UUID(), nullable=False),
    sa.Column('reader_user_id', postgresql.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['message_id'], ['message.id'], onupdate='RESTRICT', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['reader_user_id'], ['user.id'], onupdate='RESTRICT', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['created_by'], ['user.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['updated_by'], ['user.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('msg_read_unique_idx', 'message_read', ['message_id', 'reader_user_id'], unique=True)
    op.create_table('course_submission_group_member',
    sa.Column('id', postgresql.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('version', sa.BigInteger(), server_default=sa.text('0'), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by', postgresql.UUID(), nullable=True),
    sa.Column('updated_by', postgresql.UUID(), nullable=True),
    sa.Column('properties', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('course_id', postgresql.UUID(), nullable=False),
    sa.Column('course_submission_group_id', postgresql.UUID(), nullable=False),
    sa.Column('course_member_id', postgresql.UUID(), nullable=False),
    # removed: course_content_id (redundant, group ties to content via group table)
    # removed FK to course_content
    sa.ForeignKeyConstraint(['course_id'], ['course.id'], onupdate='RESTRICT', ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['course_member_id'], ['course_member.id'], onupdate='RESTRICT', ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['course_submission_group_id'], ['course_submission_group.id'], onupdate='RESTRICT', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['created_by'], ['user.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['updated_by'], ['user.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    # removed unique index including course_content_id
    op.create_index('course_submission_group_member_key', 'course_submission_group_member', ['course_submission_group_id', 'course_member_id'], unique=True)
    op.create_index(op.f('ix_course_submission_group_member_course_id'), 'course_submission_group_member', ['course_id'], unique=False)
    op.create_table('result',
    sa.Column('id', postgresql.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('version', sa.BigInteger(), server_default=sa.text('0'), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by', postgresql.UUID(), nullable=True),
    sa.Column('updated_by', postgresql.UUID(), nullable=True),
    sa.Column('properties', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('submit', sa.Boolean(), nullable=False),
    sa.Column('course_member_id', postgresql.UUID(), nullable=False),
    sa.Column('course_submission_group_id', postgresql.UUID(), nullable=True),
    sa.Column('course_content_id', postgresql.UUID(), nullable=False),
    sa.Column('course_content_type_id', postgresql.UUID(), nullable=False),
    sa.Column('execution_backend_id', postgresql.UUID(), nullable=False),
    sa.Column('test_system_id', sa.String(length=255), nullable=False),
    sa.Column('result', sa.Float(precision=53), nullable=False),
    sa.Column('result_json', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('version_identifier', sa.String(length=2048), nullable=False),
    sa.Column('status', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['course_content_id'], ['course_content.id'], onupdate='RESTRICT', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['course_content_type_id'], ['course_content_type.id'], onupdate='RESTRICT', ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['course_member_id'], ['course_member.id'], onupdate='RESTRICT', ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['course_submission_group_id'], ['course_submission_group.id'], onupdate='RESTRICT', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['created_by'], ['user.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['execution_backend_id'], ['execution_backend.id'], onupdate='RESTRICT', ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['updated_by'], ['user.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_result_course_content_id'), 'result', ['course_content_id'], unique=False)
    op.create_index(op.f('ix_result_course_member_id'), 'result', ['course_member_id'], unique=False)
    op.create_index(op.f('ix_result_course_submission_group_id'), 'result', ['course_submission_group_id'], unique=False)
    op.create_index('result_commit_test_system_key', 'result', ['test_system_id', 'execution_backend_id'], unique=True)
    op.create_index(
        'result_version_identifier_member_content_partial_key',
        'result',
        ['course_member_id', 'version_identifier', 'course_content_id'],
        unique=True,
        postgresql_where=sa.text('status NOT IN (1, 2, 6)')
    )
    op.create_index(
        'result_version_identifier_group_content_partial_key',
        'result',
        ['course_submission_group_id', 'version_identifier', 'course_content_id'],
        unique=True,
        postgresql_where=sa.text('status NOT IN (1, 2, 6)')
    )

    # Grading table for submission groups
    op.create_table('course_submission_group_grading',
    sa.Column('id', postgresql.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('version', sa.BigInteger(), server_default=sa.text('0'), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by', postgresql.UUID(), nullable=True),
    sa.Column('updated_by', postgresql.UUID(), nullable=True),
    sa.Column('properties', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('course_submission_group_id', postgresql.UUID(), nullable=False),
    sa.Column('graded_by_course_member_id', postgresql.UUID(), nullable=False),
    sa.Column('result_id', postgresql.UUID(), nullable=True),
    sa.Column('grading', sa.Float(precision=53), nullable=False),
    sa.Column('status', sa.Integer(), server_default=sa.text('0'), nullable=False),
    sa.Column('feedback', sa.String(length=4096), nullable=True),
    sa.ForeignKeyConstraint(['course_submission_group_id'], ['course_submission_group.id'], onupdate='RESTRICT', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['graded_by_course_member_id'], ['course_member.id'], onupdate='RESTRICT', ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['result_id'], ['result.id'], onupdate='RESTRICT', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['created_by'], ['user.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['updated_by'], ['user.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_grading_submission_group', 'course_submission_group_grading', ['course_submission_group_id'], unique=False)
    op.create_index('idx_grading_graded_by', 'course_submission_group_grading', ['graded_by_course_member_id'], unique=False)
    op.create_index('idx_grading_result', 'course_submission_group_grading', ['result_id'], unique=False)
    # ### end Alembic commands ###
    
    # Create functions and triggers for CourseContent tree validation
    op.execute("""
        CREATE OR REPLACE FUNCTION validate_course_content_hierarchy()
        RETURNS TRIGGER AS $$
        DECLARE
            parent_path ltree;
            parent_type_id uuid;
            parent_kind_id text;
            parent_has_descendants boolean;
            current_kind_id text;
            current_has_ascendants boolean;
        BEGIN
            -- Skip validation for root nodes
            IF nlevel(NEW.path) <= 1 THEN
                RETURN NEW;
            END IF;
            
            -- Get parent path
            parent_path := subpath(NEW.path, 0, nlevel(NEW.path) - 1);
            
            -- Get parent's content type and kind info
            SELECT cc.course_content_type_id, cct.course_content_kind_id, cck.has_descendants
            INTO parent_type_id, parent_kind_id, parent_has_descendants
            FROM course_content cc
            JOIN course_content_type cct ON cc.course_content_type_id = cct.id
            JOIN course_content_kind cck ON cct.course_content_kind_id = cck.id
            WHERE cc.course_id = NEW.course_id AND cc.path = parent_path;
            
            IF parent_type_id IS NULL THEN
                RAISE EXCEPTION 'Parent course content not found for path %', parent_path;
            END IF;
            
            -- Get current content's kind info
            SELECT cct.course_content_kind_id, cck.has_ascendants
            INTO current_kind_id, current_has_ascendants
            FROM course_content_type cct
            JOIN course_content_kind cck ON cct.course_content_kind_id = cck.id
            WHERE cct.id = NEW.course_content_type_id;
            
            -- Check if parent allows descendants
            IF NOT parent_has_descendants THEN
                RAISE EXCEPTION 'Parent content kind % does not allow descendants', parent_kind_id;
            END IF;
            
            -- Check if current content allows ascendants
            IF NOT current_has_ascendants THEN
                RAISE EXCEPTION 'Content kind % does not allow ascendants', current_kind_id;
            END IF;
            
            RETURN NEW;
        END;
        $$ LANGUAGE plpgsql;
        
        CREATE TRIGGER trg_validate_course_content_hierarchy
        BEFORE INSERT OR UPDATE OF path, course_content_type_id ON course_content
        FOR EACH ROW
        EXECUTE FUNCTION validate_course_content_hierarchy();
    """)
    
    # Function to validate that only submittable content can have examples
    op.execute("""
        CREATE OR REPLACE FUNCTION validate_course_content_example_submittable()
        RETURNS TRIGGER AS $$
        DECLARE
            is_submittable boolean;
        BEGIN
            -- Skip if no example is set
            IF NEW.example_version_id IS NULL THEN
                RETURN NEW;
            END IF;
            
            -- Check if the content type's kind is submittable
            SELECT cck.submittable INTO is_submittable
            FROM course_content_type cct
            JOIN course_content_kind cck ON cct.course_content_kind_id = cck.id
            WHERE cct.id = NEW.course_content_type_id;
            
            IF NOT is_submittable THEN
                RAISE EXCEPTION 'Only submittable content can have examples';
            END IF;
            
            RETURN NEW;
        END;
        $$ LANGUAGE plpgsql;
        
        CREATE TRIGGER trg_validate_course_content_example
        BEFORE INSERT OR UPDATE OF example_version_id ON course_content
        FOR EACH ROW
        EXECUTE FUNCTION validate_course_content_example_submittable();
    """)
    
    # Management functions for CourseContent hierarchy
    op.execute("""
        -- Function to get all descendants of a course content
        CREATE OR REPLACE FUNCTION get_course_content_descendants(content_id uuid)
        RETURNS TABLE(id uuid, path ltree, title text, depth int) AS $$
        DECLARE
            content_path ltree;
            content_course_id uuid;
        BEGIN
            -- Get the path and course_id of the given content
            SELECT cc.path, cc.course_id INTO content_path, content_course_id
            FROM course_content cc
            WHERE cc.id = content_id;
            
            -- Return all descendants
            RETURN QUERY
            SELECT cc.id, cc.path, cc.title, nlevel(cc.path) - nlevel(content_path) as depth
            FROM course_content cc
            WHERE cc.course_id = content_course_id
              AND cc.path <@ content_path  -- is descendant
              AND cc.path != content_path  -- exclude self
            ORDER BY cc.path;
        END;
        $$ LANGUAGE plpgsql;
        
        -- Function to check if a course content can be safely deleted
        CREATE OR REPLACE FUNCTION can_delete_course_content(content_id uuid)
        RETURNS boolean AS $$
        DECLARE
            has_children boolean;
        BEGIN
            -- Check if the content has any children
            SELECT EXISTS(
                SELECT 1 FROM get_course_content_descendants(content_id)
            ) INTO has_children;
            
            RETURN NOT has_children;
        END;
        $$ LANGUAGE plpgsql;
    """)
    
    # Function to handle example dependency resolution
    op.execute("""
        CREATE OR REPLACE FUNCTION resolve_example_dependencies(example_id uuid)
        RETURNS TABLE(depends_id uuid, depth int) AS $$
        WITH RECURSIVE dep_tree AS (
            -- Base case: direct dependencies
            SELECT ed.depends_id, 1 as depth
            FROM example_dependency ed
            WHERE ed.example_id = $1
            
            UNION ALL
            
            -- Recursive case: transitive dependencies
            SELECT ed.depends_id, dt.depth + 1
            FROM example_dependency ed
            JOIN dep_tree dt ON ed.example_id = dt.depends_id
            WHERE dt.depth < 10  -- Prevent infinite recursion
        )
        SELECT DISTINCT depends_id, MIN(depth) as depth
        FROM dep_tree
        GROUP BY depends_id
        ORDER BY depth, depends_id;
        $$ LANGUAGE sql;
    """)
    
    # Insert default course_content_kinds
    op.execute("""
        INSERT INTO course_content_kind (id, title, description, has_ascendants, has_descendants, submittable)
        VALUES 
            ('assignment', 'Assignment', 'Programming assignments for students', true, false, true),
            ('unit', 'Unit', 'Learning units and modules', true, true, false)
        ON CONFLICT (id) DO NOTHING;
    """)
    
    # Insert default system roles
    op.execute("""
        INSERT INTO role (id, title, description, builtin)
        VALUES 
            ('_admin', 'Administrator', 'Full system permissions.', true),
            ('_user_manager', 'User Manager', 'Manage user accounts and permissions.', true),
            ('_organization_manager', 'Organization Manager', 'Manage organizations and their members.', true)
        ON CONFLICT (id) DO NOTHING;
    """)
    
    # Insert default course roles
    op.execute("""
        INSERT INTO course_role (id, title, description, builtin)
        VALUES 
            ('_student', 'Student', 'Course participant with basic permissions.', true),
            ('_tutor', 'Tutor', 'Course teaching assistant with elevated permissions.', true),
            ('_lecturer', 'Lecturer', 'Course instructor with full course permissions.', true),
            ('_maintainer', 'Maintainer', 'Course maintainer with administrative permissions.', true),
            ('_owner', 'Owner', 'Course owner with full control.', true)
        ON CONFLICT (id) DO NOTHING;
    """)

def downgrade() -> None:
    """Downgrade schema."""
    # Drop functions and triggers
    op.execute("""
        DROP FUNCTION IF EXISTS resolve_example_dependencies(uuid) CASCADE;
        DROP FUNCTION IF EXISTS can_delete_course_content(uuid) CASCADE;
        DROP FUNCTION IF EXISTS get_course_content_descendants(uuid) CASCADE;
        DROP TRIGGER IF EXISTS trg_validate_course_content_example ON course_content CASCADE;
        DROP FUNCTION IF EXISTS validate_course_content_example_submittable() CASCADE;
        DROP TRIGGER IF EXISTS trg_validate_course_content_hierarchy ON course_content CASCADE;
        DROP FUNCTION IF EXISTS validate_course_content_hierarchy() CASCADE;
    """)
    
    # ### commands auto generated by Alembic - please adjust! ###
    # Drop deployment tracking tables
    op.drop_index('idx_history_workflow_id', table_name='deployment_history')
    op.drop_index('idx_history_created_at', table_name='deployment_history')
    op.drop_index('idx_history_action', table_name='deployment_history')
    op.drop_index('idx_history_deployment_id', table_name='deployment_history')
    op.drop_table('deployment_history')
    op.drop_index('idx_deployment_example_version', table_name='course_content_deployment')
    op.drop_index('idx_deployment_deployed_at', table_name='course_content_deployment')
    op.drop_index('idx_deployment_status', table_name='course_content_deployment')
    op.drop_table('course_content_deployment')

    op.drop_index('result_version_identifier_member_content_partial_key', table_name='result')
    op.drop_index('result_version_identifier_group_content_partial_key', table_name='result')
    op.drop_index('idx_grading_result', table_name='course_submission_group_grading')
    op.drop_index('idx_grading_graded_by', table_name='course_submission_group_grading')
    op.drop_index('idx_grading_submission_group', table_name='course_submission_group_grading')
    op.drop_table('course_submission_group_grading')
    op.drop_index('result_commit_test_system_key', table_name='result')
    op.drop_index(op.f('ix_result_course_submission_group_id'), table_name='result')
    op.drop_index(op.f('ix_result_course_member_id'), table_name='result')
    op.drop_index(op.f('ix_result_course_content_id'), table_name='result')
    op.drop_table('result')
    op.drop_index(op.f('ix_course_submission_group_member_course_id'), table_name='course_submission_group_member')
    op.drop_index('course_submission_group_member_key', table_name='course_submission_group_member')
    op.drop_table('course_submission_group_member')
    op.drop_index('msg_read_unique_idx', table_name='message_read')
    op.drop_table('message_read')
    op.drop_table('course_submission_group')
    op.drop_index(op.f('ix_course_member_comment_transmitter_id'), table_name='course_member_comment')
    op.drop_index(op.f('ix_course_member_comment_course_member_id'), table_name='course_member_comment')
    op.drop_table('course_member_comment')
    op.drop_index('msg_course_group_archived_idx', table_name='message')
    op.drop_index('msg_submission_group_archived_idx', table_name='message')
    op.drop_index('msg_course_member_archived_idx', table_name='message')
    op.drop_index('msg_user_archived_idx', table_name='message')
    op.drop_index('msg_author_archived_idx', table_name='message')
    op.drop_index('msg_parent_archived_idx', table_name='message')
    op.drop_table('message')
    op.drop_index('course_member_key', table_name='course_member')
    op.drop_table('course_member')
    op.drop_table('example_dependency')
    op.drop_table('example_version')
    op.drop_index('course_content_path_key', table_name='course_content')
    op.drop_table('course_content')
    op.drop_index('course_group_title_key', table_name='course_group')
    op.drop_index('course_group_course_id_key', table_name='course_group')
    op.drop_table('course_group')
    op.drop_table('course_execution_backend')
    op.drop_index('course_content_type_slug_key', table_name='course_content_type')
    op.drop_index('course_content_type_course_id_key', table_name='course_content_type')
    op.drop_table('course_content_type')
    op.drop_index('course_path_key', table_name='course')
    op.drop_table('course')
    op.drop_index('course_family_path_key', table_name='course_family')
    op.drop_table('course_family')
    op.drop_table('user_role')
    op.drop_table('user_group')
    op.drop_table('student_profile')
    op.drop_table('session')
    op.drop_table('role_claim')
    op.drop_table('profile')
    op.drop_table('example')
    op.drop_table('example_repository')
    op.drop_index('organization_path_key', table_name='organization')
    op.drop_index('organization_number_key', table_name='organization')
    op.drop_index(op.f('ix_organization_path'), table_name='organization')
    op.drop_index(op.f('ix_organization_organization_type'), table_name='organization')
    op.drop_table('organization')
    op.drop_table('group_claim')
    op.drop_table('execution_backend')
    op.drop_index(op.f('ix_account_user_id'), table_name='account')
    op.drop_index('account_provider_type_user_id_key', table_name='account')
    op.drop_index('account_provider_type_provider_account_id_key', table_name='account')
    op.drop_table('account')
    op.drop_table('user')
    op.drop_table('role')
    op.drop_table('group')
    op.drop_table('course_role')
    op.drop_table('course_content_kind')
    # ### end Alembic commands ###
    
    # Drop sequences
    op.execute("DROP SEQUENCE IF EXISTS user_unique_fs_number_seq;")
    
    # Drop functions
    op.execute("DROP FUNCTION IF EXISTS ctutor_valid_slug CASCADE;")
    
    # Drop types
    op.execute("DROP TYPE IF EXISTS ctutor_group_type CASCADE;")
    op.execute("DROP TYPE IF EXISTS user_type CASCADE;")
    op.execute("DROP TYPE IF EXISTS organization_type CASCADE;")
    
    # Drop extensions
    op.execute("DROP EXTENSION IF EXISTS pgcrypto CASCADE;")
    op.execute("DROP EXTENSION IF EXISTS ltree CASCADE;")
    op.execute("DROP EXTENSION IF EXISTS \"uuid-ossp\" CASCADE;")
