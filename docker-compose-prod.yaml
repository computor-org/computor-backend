services:
  traefik:
    image: traefik:v3.3.2
    ports:
      - 8080:80
    command:
      - "--api.insecure=false"
      - "--providers.docker=true"
      - "--entrypoints.web.address=:80"
    volumes:
      - ${DOCKER_SOCKED_PATH}:/var/run/docker.sock:ro
  redis:
    image: "redis:alpine"
    restart: unless-stopped
    ports:
      - ${REDIS_PORT}:6379
    command: redis-server --save 20 1 --loglevel warning --requirepass ${REDIS_PASSWORD}
    volumes:
      - ${SYSTEM_DEPLOYMENT_PATH}/redis:/usr/local/etc/redis
      - ${SYSTEM_DEPLOYMENT_PATH}/redis-data:/data
  postgres:
    image: postgres:16
    ports:
      - 5432:${POSTGRES_PORT}
    healthcheck:
      test: ["CMD-SHELL", "PGUSER=${POSTGRES_USER}", "pg_isready"]
      interval: 1s
      timeout: 10s
      retries: 5
    volumes:
      - ${SYSTEM_DEPLOYMENT_PATH}/postgres:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
      - PGPORT=${POSTGRES_PORT}
  uvicorn:
    build:
      context: ./
      dockerfile: ./docker/api/Dockerfile
    restart: unless-stopped
    command:
      ["sh", "startup.bash"]
    volumes:
      - ${SYSTEM_DEPLOYMENT_PATH}/execution-backend:${API_ROOT_PATH}
    ports:
      - 8000:8000
    environment:
      EXECUTION_BACKEND_API_USER: ${EXECUTION_BACKEND_API_USER}
      EXECUTION_BACKEND_API_PASSWORD: ${EXECUTION_BACKEND_API_PASSWORD}
      API_LOCAL_STORAGE_DIR: ${API_LOCAL_STORAGE_DIR}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_URL: ${POSTGRES_URL}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      DEBUG_MODE: ${DEBUG_MODE}
      TOKEN_SECRET: ${TOKEN_SECRET}
      REACT_APP_BACKEND_URL: ${REACT_APP_BACKEND_URL}
    depends_on:
      postgres:
        condition: service_healthy
      traefik:
        condition: service_started
    labels:
    - "traefik.enable=true"
    - "traefik.http.routers.uvicorn.rule=PathPrefix(`/api`)"
    - "traefik.http.routers.uvicorn.entrypoints=web"
    - "traefik.http.middlewares.uvicorn-stripprefix.stripprefix.prefixes=/api"
    - "traefik.http.routers.uvicorn.middlewares=uvicorn-stripprefix"
  nginx:
    image: nginx:1.27.3
    volumes:
    - ${SYSTEM_DEPLOYMENT_PATH}/execution-backend/shared/documents:/usr/share/nginx/html:ro
    - ${NGINX_CONFIG}:/etc/nginx/conf.d/default.conf
    labels:
    - "traefik.enable=true"
    - "traefik.http.routers.nginx.rule=PathPrefix(`/docs`)"
    - "traefik.http.routers.nginx.entrypoints=web"
    - "traefik.http.middlewares.nginx-stripprefix.stripprefix.prefixes=/docs"
    - "traefik.http.routers.nginx.middlewares=nginx-stripprefix"
    depends_on:
      - traefik

  # Celery System Worker - Handles all system-dependent tasks (releases, filesystem operations)
  celery-system-worker:
    deploy:
      mode: replicated
      replicas: ${CELERY_SYSTEM_WORKER_REPLICAS:-2}
    build:
      context: ./
      dockerfile: ./docker/celery-worker/Dockerfile
      args:
        SYSTEM_GIT_NAME: ${SYSTEM_GIT_NAME}
        SYSTEM_GIT_EMAIL: ${SYSTEM_GIT_EMAIL}
    restart: unless-stopped
    volumes:
      - ${SYSTEM_DEPLOYMENT_PATH}/execution-backend:${API_ROOT_PATH}
    environment:
      # Worker configuration
      WORKER_TYPE: system
      WORKER_QUEUES: high_priority,default,low_priority
      WORKER_CONCURRENCY: 4
      WORKER_LOG_LEVEL: info
      # API configuration
      EXECUTION_BACKEND_API_URL: ${EXECUTION_BACKEND_API_URL}
      EXECUTION_BACKEND_API_USER: ${EXECUTION_BACKEND_API_USER}
      EXECUTION_BACKEND_API_PASSWORD: ${EXECUTION_BACKEND_API_PASSWORD}
      API_LOCAL_STORAGE_DIR: ${API_LOCAL_STORAGE_DIR}
      # Database configuration
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_URL: ${POSTGRES_URL}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      # Redis configuration
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      # Other configuration
      DEBUG_MODE: ${DEBUG_MODE}
      TOKEN_SECRET: ${TOKEN_SECRET}
      # MinIO configuration
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_SECRET_KEY: ${MINIO_ROOT_PASSWORD:-minioadmin}
      MINIO_SECURE: "false"
      MINIO_REGION: ${MINIO_REGION:-us-east-1}
      MINIO_DEFAULT_BUCKET: ${MINIO_DEFAULT_BUCKETS:-computor-storage}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
      uvicorn:
        condition: service_started
    labels:
      - traefik.enable=false

  # Flower - Celery Monitoring UI
  flower:
    build:
      context: ./
      dockerfile: ./docker/api/Dockerfile
    restart: unless-stopped
    command: ["python", "-m", "celery", "-A", "ctutor_backend.tasks.celery_app", "flower", "--port=5555"]
    volumes:
      - ${SYSTEM_DEPLOYMENT_PATH}/execution-backend:${API_ROOT_PATH}
    environment:
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      FLOWER_BASIC_AUTH: ${FLOWER_USER:-admin}:${FLOWER_PASSWORD:-flower123}
      FLOWER_URL_PREFIX: flower
      DEBUG_MODE: ${DEBUG_MODE}
      TOKEN_SECRET: ${TOKEN_SECRET}
    depends_on:
      redis:
        condition: service_started
      uvicorn:
        condition: service_started
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.flower.rule=PathPrefix(`/flower`)"
      - "traefik.http.routers.flower.entrypoints=web"
      - "traefik.http.services.flower.loadbalancer.server.port=5555"

  # MinIO Object Storage Service
  minio:
    image: minio/minio:latest
    container_name: computor-minio
    restart: unless-stopped
    volumes:
      - ${SYSTEM_DEPLOYMENT_PATH}/minio/data:/data
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
      MINIO_DEFAULT_BUCKETS: ${MINIO_DEFAULT_BUCKETS:-computor-storage}
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 5s
      timeout: 5s
      retries: 5
    labels:
      - traefik.enable=true
      - traefik.http.routers.minio-api.rule=PathPrefix(`/minio`)
      - traefik.http.routers.minio-api.entrypoints=web
      - traefik.http.routers.minio-api.service=minio-api
      - traefik.http.services.minio-api.loadbalancer.server.port=9000
      - traefik.http.middlewares.minio-api-stripprefix.stripprefix.prefixes=/minio
      - traefik.http.routers.minio-api.middlewares=minio-api-stripprefix
      - traefik.http.routers.minio-console.rule=PathPrefix(`/minio-console`)
      - traefik.http.routers.minio-console.entrypoints=web
      - traefik.http.routers.minio-console.service=minio-console
      - traefik.http.services.minio-console.loadbalancer.server.port=9001