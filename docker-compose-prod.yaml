services:
  traefik:
    image: traefik:v3.3.2
    ports:
      - 8080:80
    command:
      - "--api.insecure=false"
      - "--providers.docker=true"
      - "--entrypoints.web.address=:80"
    volumes:
      - ${DOCKER_SOCKET_PATH}:/var/run/docker.sock:ro
  redis:
    image: "redis:alpine"
    restart: unless-stopped
    ports:
      - ${REDIS_PORT}:6379
    command: redis-server --save 20 1 --loglevel warning --requirepass ${REDIS_PASSWORD}
    volumes:
      - ${SYSTEM_DEPLOYMENT_PATH}/redis:/usr/local/etc/redis
      - ${SYSTEM_DEPLOYMENT_PATH}/redis-data:/data
  postgres:
    image: postgres:16
    ports:
      - 5432:${POSTGRES_PORT}
    healthcheck:
      test: ["CMD-SHELL", "PGUSER=${POSTGRES_USER}", "pg_isready"]
      interval: 1s
      timeout: 10s
      retries: 5
    volumes:
      - ${SYSTEM_DEPLOYMENT_PATH}/postgres:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
      - PGPORT=${POSTGRES_PORT}
      
  # Temporal PostgreSQL database
  temporal-postgres:
    image: postgres:16
    container_name: temporal-postgres
    restart: unless-stopped
    ports:
      - 5433:5433
    volumes:
      - ${SYSTEM_DEPLOYMENT_PATH}/temporal-postgres:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: temporal
      POSTGRES_PASSWORD: temporal
      POSTGRES_DB: temporal
      PGPORT: 5433
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U temporal"]
      interval: 5s
      timeout: 5s
      retries: 5
      
  # Temporal server
  temporal:
    image: temporalio/auto-setup:1.27.0
    container_name: temporal
    restart: unless-stopped
    ports:
      - 7233:7233
    environment:
      - DB=postgresql
      - DB_PORT=5433
      - POSTGRES_USER=temporal
      - POSTGRES_PWD=temporal
      - POSTGRES_SEEDS=temporal-postgres
      - DYNAMIC_CONFIG_FILE_PATH=config/dynamicconfig.yaml
    volumes:
      - ./docker/temporal/dynamicconfig.yaml:/etc/temporal/config/dynamicconfig.yaml
    depends_on:
      temporal-postgres:
        condition: service_healthy
    labels:
      - traefik.enable=false
      
  # Temporal Web UI
  temporal-ui:
    image: temporalio/ui:latest
    container_name: temporal-ui
    restart: unless-stopped
    ports:
      - 8088:8080
    environment:
      - TEMPORAL_ADDRESS=temporal:7233
      - TEMPORAL_CORS_ORIGINS=http://localhost:3000
    depends_on:
      - temporal
    labels:
      - traefik.enable=false

  # Temporal Worker (Production)
  temporal-worker:
    build:
      context: ./
      dockerfile: ./docker/api/Dockerfile
    restart: unless-stopped
    command: ["python", "-m", "ctutor_backend.tasks.temporal_worker","--queues","computor-tasks"]
    deploy:
      replicas: ${TEMPORAL_WORKER_REPLICAS:-2}
    environment:
      - TEMPORAL_HOST=temporal
      - TEMPORAL_PORT=7233
      - TEMPORAL_NAMESPACE=default
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - DEBUG_MODE=${DEBUG_MODE}
      - TOKEN_SECRET=${TOKEN_SECRET}
      - EXECUTION_BACKEND_API_USER=${EXECUTION_BACKEND_API_USER}
      - EXECUTION_BACKEND_API_PASSWORD=${EXECUTION_BACKEND_API_PASSWORD}
      - API_LOCAL_STORAGE_DIR=${API_LOCAL_STORAGE_DIR}
      - REACT_APP_BACKEND_URL=${REACT_APP_BACKEND_URL}
    volumes:
      - ${SYSTEM_DEPLOYMENT_PATH}/execution-backend:${API_ROOT_PATH}
    depends_on:
      - temporal
      - postgres
      - redis
    labels:
      - traefik.enable=false


  uvicorn:
    build:
      context: ./
      dockerfile: ./docker/api/Dockerfile
    restart: unless-stopped
    command:
      ["sh", "startup.bash"]
    volumes:
      - ${SYSTEM_DEPLOYMENT_PATH}/execution-backend:${API_ROOT_PATH}
    ports:
      - 8000:8000
    environment:
      EXECUTION_BACKEND_API_USER: ${EXECUTION_BACKEND_API_USER}
      EXECUTION_BACKEND_API_PASSWORD: ${EXECUTION_BACKEND_API_PASSWORD}
      API_LOCAL_STORAGE_DIR: ${API_LOCAL_STORAGE_DIR}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      DEBUG_MODE: ${DEBUG_MODE}
      TOKEN_SECRET: ${TOKEN_SECRET}
      REACT_APP_BACKEND_URL: ${REACT_APP_BACKEND_URL}
    depends_on:
      postgres:
        condition: service_healthy
      traefik:
        condition: service_started
    labels:
    - "traefik.enable=true"
    - "traefik.http.routers.uvicorn.rule=PathPrefix(`/api`)"
    - "traefik.http.routers.uvicorn.entrypoints=web"
    - "traefik.http.middlewares.uvicorn-stripprefix.stripprefix.prefixes=/api"
    - "traefik.http.routers.uvicorn.middlewares=uvicorn-stripprefix"
  
  # Simple static file server (replaces nginx)
  static-server:
    image: halverneus/static-file-server:latest
    restart: unless-stopped
    volumes:
      - ${SYSTEM_DEPLOYMENT_PATH}/execution-backend/shared/documents:/web:ro
    environment:
      - FOLDER=/web
      - PORT=8080
      - SHOW_LISTING=true
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.static.rule=PathPrefix(`/docs`)"
      - "traefik.http.routers.static.entrypoints=web"
      - "traefik.http.middlewares.static-stripprefix.stripprefix.prefixes=/docs"
      - "traefik.http.routers.static.middlewares=static-stripprefix"
      - "traefik.http.services.static.loadbalancer.server.port=8080"
    depends_on:
      - traefik



  # MinIO Object Storage Service
  minio:
    image: minio/minio:latest
    container_name: computor-minio
    restart: unless-stopped
    volumes:
      - ${SYSTEM_DEPLOYMENT_PATH}/minio/data:/data
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
      MINIO_DEFAULT_BUCKETS: ${MINIO_DEFAULT_BUCKETS:-computor-storage}
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 5s
      timeout: 5s
      retries: 5
    labels:
      - traefik.enable=false