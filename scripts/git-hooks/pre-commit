#!/usr/bin/env bash
# Pre-commit hook to prevent secrets from being committed
# This hook checks for various types of tokens, keys, and passwords

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

echo "üîç Checking for secrets in staged files..."

# Get all staged files
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM)

if [ -z "$STAGED_FILES" ]; then
    echo "No staged files to check."
    exit 0
fi

# Initialize error flag
ERRORS_FOUND=0

# Function to check file for secrets
check_file() {
    local file="$1"
    local file_errors=0
    
    # Skip binary files
    if file --mime-type "$file" | grep -q "charset=binary"; then
        return 0
    fi
    
    # GitLab Personal Access Tokens (glpat-)
    if grep -qE 'glpat-[a-zA-Z0-9_-]{20,}' "$file"; then
        # Check if it's an example token
        if ! grep -qE 'glpat-(EXAMPLE|example|test|TEST|fake|FAKE|dummy|DUMMY|placeholder|PLACEHOLDER)[a-zA-Z0-9_-]*' "$file"; then
            echo -e "${RED}‚ùå GitLab Personal Access Token found in: $file${NC}"
            echo "   Pattern: glpat-XXXXXXXXXXXXXXXXXXXX"
            file_errors=1
        fi
    fi
    
    # GitHub Personal Access Tokens (ghp_)
    if grep -qE 'ghp_[a-zA-Z0-9]{36,}' "$file"; then
        echo -e "${RED}‚ùå GitHub Personal Access Token found in: $file${NC}"
        echo "   Pattern: ghp_XXXXXXXXXXXXXXXXXXXX"
        file_errors=1
    fi
    
    # AWS Access Key IDs
    if grep -qE 'AKIA[0-9A-Z]{16}' "$file"; then
        echo -e "${RED}‚ùå AWS Access Key ID found in: $file${NC}"
        echo "   Pattern: AKIAXXXXXXXXXXXXXXXXX"
        file_errors=1
    fi
    
    # Generic API Keys (common patterns)
    if grep -qE '(api[_-]?key|apikey|api_token)[[:space:]]*[=:][[:space:]]*["\047]?[a-zA-Z0-9_-]{32,}["\047]?' "$file"; then
        echo -e "${YELLOW}‚ö†Ô∏è  Potential API key found in: $file${NC}"
        echo "   Check if this is a real key or just an example"
        # Don't block for potential matches, just warn
    fi
    
    # Private Keys
    if grep -qE -- '-----BEGIN (RSA |EC |DSA |OPENSSH )?PRIVATE KEY' "$file" 2>/dev/null || grep -q -- '-----BEGIN.*PRIVATE KEY' "$file" 2>/dev/null; then
        echo -e "${RED}‚ùå Private key found in: $file${NC}"
        file_errors=1
    fi
    
    # JWT tokens (basic check)
    if grep -qE 'eyJ[a-zA-Z0-9_-]+\.eyJ[a-zA-Z0-9_-]+\.[a-zA-Z0-9_-]+' "$file"; then
        echo -e "${RED}‚ùå JWT token found in: $file${NC}"
        file_errors=1
    fi
    
    # Database connection strings with passwords
    if grep -qE '(mongodb|postgres|postgresql|mysql|redis)://[^:]+:[^@]+@' "$file"; then
        echo -e "${YELLOW}‚ö†Ô∏è  Database connection string with credentials found in: $file${NC}"
        echo "   Consider using environment variables instead"
    fi
    
    # Slack tokens
    if grep -qE 'xox[baprs]-[0-9]{10,}-[0-9]{10,}-[a-zA-Z0-9]{24,}' "$file"; then
        echo -e "${RED}‚ùå Slack token found in: $file${NC}"
        file_errors=1
    fi
    
    # Generic password patterns (be careful with false positives)
    if grep -qE '(password|passwd|pwd)[[:space:]]*[=:][[:space:]]*["\047][^"\047]{8,}["\047]' "$file"; then
        # Check if it's not a variable assignment or example
        if ! grep -qE '(password|passwd|pwd)[[:space:]]*[=:][[:space:]]*["\047](password|example|changeme|your[_-]?password|<.*>|\$\{.*\})["\047]' "$file"; then
            echo -e "${YELLOW}‚ö†Ô∏è  Hardcoded password found in: $file${NC}"
            echo "   Consider using environment variables"
        fi
    fi
    
    return $file_errors
}

# Check each staged file
for FILE in $STAGED_FILES; do
    if [ -f "$FILE" ]; then
        if ! check_file "$FILE"; then
            ERRORS_FOUND=1
        fi
    fi
done

# Additional check for specific patterns in Python/JS files
for FILE in $STAGED_FILES; do
    if [[ "$FILE" =~ \.(py|js|ts|jsx|tsx)$ ]] && [ -f "$FILE" ]; then
        # Check for hardcoded tokens in common variable names
        if grep -qE '(TOKEN|SECRET|KEY|PASSWORD)[[:space:]]*=[[:space:]]*["\047][^"\047]{10,}["\047]' "$FILE"; then
            if ! grep -qE '(TOKEN|SECRET|KEY|PASSWORD)[[:space:]]*=[[:space:]]*["\047](test|example|dummy|fake|mock|your|placeholder|\$\{.*\}|process\.env\.|os\.environ\.)[^"\047]*["\047]' "$FILE"; then
                echo -e "${YELLOW}‚ö†Ô∏è  Potential hardcoded secret in: $FILE${NC}"
                echo "   Check variable assignments with TOKEN/SECRET/KEY/PASSWORD"
            fi
        fi
    fi
done

# Final result
if [ $ERRORS_FOUND -eq 1 ]; then
    echo
    echo -e "${RED}‚ùå Secrets detected! Commit blocked.${NC}"
    echo
    echo "To fix this:"
    echo "1. Remove the secret from your files"
    echo "2. Use environment variables instead"
    echo "3. Add the file to .gitignore if it should contain secrets"
    echo
    echo "If this is a false positive (e.g., example token), you can:"
    echo "- Modify the token to clearly be an example (e.g., 'glpat-EXAMPLE_TOKEN_DO_NOT_USE')"
    echo "- Use git commit --no-verify to skip this check (NOT RECOMMENDED)"
    exit 1
else
    echo -e "${GREEN}‚úÖ No secrets detected. Proceeding with commit.${NC}"
fi

exit 0