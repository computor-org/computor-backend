services:
  traefik:
    image: traefik:v3.3.2
    ports:
      - 8080:80
    command:
      - "--api.insecure=false"
      - "--providers.docker=true"
      - "--entrypoints.web.address=:80"
    volumes:
      - ${DOCKER_SOCKED_PATH}:/var/run/docker.sock:ro
  redis:
    image: "redis:alpine"
    restart: unless-stopped
    ports:
      - ${REDIS_PORT}:6379
    command: redis-server --save 20 1 --loglevel warning --requirepass ${REDIS_PASSWORD}
    volumes:
      - ${SYSTEM_DEPLOYMENT_PATH}/redis:/usr/local/etc/redis
      - ${SYSTEM_DEPLOYMENT_PATH}/redis-data:/data
  postgres:
    image: postgres:16
    ports:
      - 5432:5437
    volumes:
      - ${SYSTEM_DEPLOYMENT_PATH}/postgres:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
      - PGPORT=5437
  prefect_db:
    image: postgres:15.2-alpine
    restart: unless-stopped
    volumes:
      - ${SYSTEM_DEPLOYMENT_PATH}/prefect_db:/var/lib/postgresql/data
    ports:
      - 5437:5432
    healthcheck:
      test: ["CMD-SHELL", "PGUSER=postgres", "pg_isready"]
      interval: 1s
      timeout: 10s
      retries: 5
    environment:
      POSTGRES_USER: ${PREFECT_POSTGRES_USER}
      POSTGRES_PASSWORD: ${PREFECT_POSTGRES_PASSWORD}
      POSTGRES_DB: ${PREFECT_POSTGRES_DB}
  prefect:
    image: prefecthq/prefect:2.20.3-python3.10
    depends_on:
      - prefect_db
    restart: unless-stopped
    environment:
      PREFECT_API_DATABASE_CONNECTION_URL: postgresql+asyncpg://${PREFECT_POSTGRES_USER}:${PREFECT_POSTGRES_PASSWORD}@prefect_db:5432/${PREFECT_POSTGRES_DB}
      PREFECT_AGENT_QUERY_INTERVAL: 1
      PREFECT_AGENT_PREFETCH_SECONDS: 1
      PREFECT_WORKER_HEARTBEAT_SECONDS: 5
      PREFECT_WORKER_QUERY_SECONDS: 1
      PREFECT_WORKER_PREFETCH_SECONDS: 1
    entrypoint: ["prefect", "server", "start", "--host", "0.0.0.0", "--log-level", "WARNING",]
    volumes:
      - ${SYSTEM_DEPLOYMENT_PATH}/prefect:/root/.prefect
    ports:
      - 4200:4200
  nginx:
    image: nginx:1.27.3
    ports:
      - 8081:80
    volumes:
      - ${SYSTEM_DEPLOYMENT_PATH}/execution-backend/shared/documents:/usr/share/nginx/html:ro
      - ./docker/nginx/nginx.conf:/etc/nginx/conf.d/default.conf
    labels:
    - "traefik.enable=true"
    - "traefik.http.routers.nginx.rule=PathPrefix(`/docs`)"
    - "traefik.http.routers.nginx.entrypoints=web"
    - "traefik.http.middlewares.nginx-stripprefix.stripprefix.prefixes=/docs"
    - "traefik.http.routers.nginx.middlewares=nginx-stripprefix"
    depends_on:
      - traefik
  # Celery System Worker - Handles all system-dependent tasks
  celery-system-worker:
    build:
      context: ./
      dockerfile: ./docker/api/Dockerfile
    restart: unless-stopped
    # Process all queues with higher concurrency for system tasks
    command: ["python", "-m", "celery", "-A", "ctutor_backend.tasks.celery_app", "worker", "--queues=high_priority,default,low_priority", "--loglevel=info", "--concurrency=4"]
    volumes:
      - ./src:/home/uvicorn/src
      - ${SYSTEM_DEPLOYMENT_PATH}/execution-backend:${API_LOCAL_STORAGE_DIR}
    environment:
      EXECUTION_BACKEND_API_URL: ${EXECUTION_BACKEND_API_URL}
      EXECUTION_BACKEND_API_USER: ${EXECUTION_BACKEND_API_USER}
      EXECUTION_BACKEND_API_PASSWORD: ${EXECUTION_BACKEND_API_PASSWORD}
      API_LOCAL_STORAGE_DIR: ${API_LOCAL_STORAGE_DIR}
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5437
      POSTGRES_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5437/${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      REDIS_HOST: redis
      REDIS_PORT: ${REDIS_PORT}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      DEBUG_MODE: development
      TOKEN_SECRET: ${TOKEN_SECRET}
    depends_on:
      - postgres
      - redis
    labels:
      - traefik.enable=false

  # Flower - Celery Monitoring UI
  flower:
    build:
      context: ./
      dockerfile: ./docker/api/Dockerfile
    restart: unless-stopped
    command: ["python", "-m", "celery", "-A", "ctutor_backend.tasks.celery_app", "flower", "--port=5555"]
    ports:
      - "5555:5555"
    volumes:
      - ./src:/home/uvicorn/src
    environment:
      REDIS_HOST: redis
      REDIS_PORT: ${REDIS_PORT}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      FLOWER_BASIC_AUTH: ${FLOWER_USER:-admin}:${FLOWER_PASSWORD:-flower123}
      FLOWER_URL_PREFIX: flower
    depends_on:
      - redis
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.flower.rule=PathPrefix(`/flower`)"
      - "traefik.http.routers.flower.entrypoints=web"
      - "traefik.http.services.flower.loadbalancer.server.port=5555"

  # backup:
  #   build:
  #     context: ./
  #     dockerfile: ./docker/backup/Dockerfile
  #   command: ["/backup.sh"]
  #   environment:
  #     # - BACKUP_CRON=0 3 * * *
  #     BACKUP_CRON: "* * * * *"
  #     POSTGRES_HOST: postgres
  #     POSTGRES_USER: ${POSTGRES_USER}
  #     POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
  #     POSTGRES_DB: ${POSTGRES_DB}
  #     BACKUP_PATH: /backups
  #     FOLDERS_TO_ZIP: /data/prefect
  #     # - FOLDERS_TO_ZIP=/data/files,/data/images
  #   volumes:
  #     - ${SYSTEM_DEPLOYMENT_PATH}:/backups
  #     - ${SYSTEM_DEPLOYMENT_PATH}:/data
  #   depends_on:
  #     - postgres
  #   labels:
  #     - traefik.enable=false
  
  keycloak:
    image: quay.io/keycloak/keycloak:25.0.6
    container_name: computor-keycloak
    restart: unless-stopped
    environment:
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN:-admin}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5437/${KEYCLOAK_DB:-keycloak}
      KC_DB_USERNAME: ${POSTGRES_USER}
      KC_DB_PASSWORD: ${POSTGRES_PASSWORD}
      KC_HOSTNAME: localhost
      KC_HOSTNAME_PORT: 8180
      KC_HOSTNAME_STRICT: false
      KC_HOSTNAME_STRICT_HTTPS: false
      KC_HTTP_ENABLED: true
      KC_HTTP_PORT: 8080
      KC_HEALTH_ENABLED: true
    ports:
      - "8180:8080"
    command:
      - start-dev
      - --import-realm
    volumes:
      - ${SYSTEM_DEPLOYMENT_PATH}/keycloak/themes:/opt/keycloak/themes
      - ${SYSTEM_DEPLOYMENT_PATH}/keycloak/imports:/opt/keycloak/data/import
    depends_on:
      - postgres
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health/ready"]
      interval: 10s
      timeout: 5s
      retries: 5
    labels:
      - traefik.enable=true
      - traefik.http.routers.keycloak.rule=PathPrefix(`/auth`)
      - traefik.http.routers.keycloak.entrypoints=web
      - traefik.http.services.keycloak.loadbalancer.server.port=8080