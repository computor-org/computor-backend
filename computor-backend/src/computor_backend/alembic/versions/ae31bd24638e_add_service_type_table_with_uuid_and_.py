"""add service_type table with uuid and ltree

Revision ID: ae31bd24638e
Revises: 19266bf266e9
Create Date: 2025-10-28 23:56:39.050711

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
import computor_backend.custom_types.ltree

# revision identifiers, used by Alembic.
revision: str = 'ae31bd24638e'
down_revision: Union[str, None] = '19266bf266e9'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('service_type',
    sa.Column('id', postgresql.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('version', sa.BigInteger(), server_default=sa.text('0'), nullable=False),
    sa.Column('path', computor_backend.custom_types.ltree.LtreeType(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('category', sa.String(length=63), nullable=False),
    sa.Column('plugin_module', sa.String(length=255), nullable=True),
    sa.Column('schema', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('icon', sa.String(length=255), nullable=True),
    sa.Column('color', sa.String(length=7), nullable=True),
    sa.Column('enabled', sa.Boolean(), server_default=sa.text('true'), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by', postgresql.UUID(), nullable=True),
    sa.Column('updated_by', postgresql.UUID(), nullable=True),
    sa.Column('properties', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), nullable=False),
    sa.CheckConstraint("path::text ~ '^[A-Za-z0-9_-]+(\\.[A-Za-z0-9_-]+)*$'", name='ck_service_type_path_format'),
    sa.ForeignKeyConstraint(['created_by'], ['user.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['updated_by'], ['user.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('path')
    )
    op.create_index('idx_service_type_category', 'service_type', ['category'], unique=False)
    op.create_index('idx_service_type_enabled', 'service_type', ['enabled'], unique=False, postgresql_where=sa.text('enabled = true'))
    op.create_index('idx_service_type_path_gist', 'service_type', ['path'], unique=False, postgresql_using='gist')
    op.create_index('idx_service_type_plugin_module', 'service_type', ['plugin_module'], unique=False, postgresql_where=sa.text('plugin_module IS NOT NULL'))
    op.drop_index('idx_user_service', table_name='user', postgresql_where='(is_service = true)')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_index('idx_user_service', 'user', ['is_service'], unique=False, postgresql_where='(is_service = true)')
    op.drop_index('idx_service_type_plugin_module', table_name='service_type', postgresql_where=sa.text('plugin_module IS NOT NULL'))
    op.drop_index('idx_service_type_path_gist', table_name='service_type', postgresql_using='gist')
    op.drop_index('idx_service_type_enabled', table_name='service_type', postgresql_where=sa.text('enabled = true'))
    op.drop_index('idx_service_type_category', table_name='service_type')
    op.drop_table('service_type')
    # ### end Alembic commands ###
