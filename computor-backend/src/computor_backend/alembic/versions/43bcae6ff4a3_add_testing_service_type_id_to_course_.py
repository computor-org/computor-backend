"""add testing_service_type_id to course_content and result

Revision ID: 43bcae6ff4a3
Revises: bc188591d940
Create Date: 2025-10-29 11:57:24.943800

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '43bcae6ff4a3'
down_revision: Union[str, None] = 'bc188591d940'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('course_content', sa.Column('testing_service_type_id', postgresql.UUID(), nullable=True))
    op.create_index(op.f('ix_course_content_testing_service_type_id'), 'course_content', ['testing_service_type_id'], unique=False)
    op.create_foreign_key(None, 'course_content', 'service_type', ['testing_service_type_id'], ['id'], ondelete='RESTRICT')
    op.add_column('result', sa.Column('testing_service_type_id', postgresql.UUID(), nullable=True))
    op.create_index(op.f('ix_result_testing_service_type_id'), 'result', ['testing_service_type_id'], unique=False)
    op.create_foreign_key(None, 'result', 'service_type', ['testing_service_type_id'], ['id'], ondelete='RESTRICT')
    # ### end Alembic commands ###

    # Data migration: Map execution_backend types to service_type
    # This migrates data from the old execution_backend.type to new service_type paths
    op.execute("""
        -- Migrate course_content.testing_service_type_id based on execution_backend.type
        UPDATE course_content cc
        SET testing_service_type_id = (
            CASE
                WHEN eb.type = 'temporal:python' THEN (SELECT id FROM service_type WHERE path = 'testing.python')
                WHEN eb.type = 'temporal:matlab' THEN (SELECT id FROM service_type WHERE path = 'testing.matlab')
                ELSE NULL
            END
        )
        FROM execution_backend eb
        WHERE cc.execution_backend_id = eb.id
          AND cc.execution_backend_id IS NOT NULL;

        -- Migrate result.testing_service_type_id based on execution_backend.type
        UPDATE result r
        SET testing_service_type_id = (
            CASE
                WHEN eb.type = 'temporal:python' THEN (SELECT id FROM service_type WHERE path = 'testing.python')
                WHEN eb.type = 'temporal:matlab' THEN (SELECT id FROM service_type WHERE path = 'testing.matlab')
                ELSE NULL
            END
        )
        FROM execution_backend eb
        WHERE r.execution_backend_id = eb.id
          AND r.execution_backend_id IS NOT NULL;

        -- Log migration results
        DO $$
        DECLARE
            cc_migrated INTEGER;
            result_migrated INTEGER;
        BEGIN
            SELECT COUNT(*) INTO cc_migrated FROM course_content WHERE testing_service_type_id IS NOT NULL;
            SELECT COUNT(*) INTO result_migrated FROM result WHERE testing_service_type_id IS NOT NULL;

            RAISE NOTICE 'Migration complete:';
            RAISE NOTICE '  - Migrated % course_content records', cc_migrated;
            RAISE NOTICE '  - Migrated % result records', result_migrated;
        END $$;
    """)


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'result', type_='foreignkey')
    op.drop_index(op.f('ix_result_testing_service_type_id'), table_name='result')
    op.drop_column('result', 'testing_service_type_id')
    op.drop_constraint(None, 'course_content', type_='foreignkey')
    op.drop_index(op.f('ix_course_content_testing_service_type_id'), table_name='course_content')
    op.drop_column('course_content', 'testing_service_type_id')
    # ### end Alembic commands ###
